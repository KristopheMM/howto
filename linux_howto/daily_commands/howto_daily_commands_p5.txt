
###################################################################
#
#  print file size in MB
#
###################################################################

ls -lh
ls -lah
ls -lash

ls -al --block-size=M
ls --block-size=M
ll --block-size=M

# ls -l | awk 'BEGIN{mega=1048576} $5 >= mega {$5 = $5/mega "MB"} {print}'


###################################################################
#
#	Removing files older than 7 days
#	https://askubuntu.com/questions/589210/removing-files-older-than-7-days/589224
#	https://unix.stackexchange.com/questions/194863/delete-files-older-than-x-days
#	https://www.howtogeek.com/howto/ubuntu/delete-files-older-than-x-days-on-linux/
#	https://linux.die.net/man/1/find
#
###################################################################

find /path/to/ -type f -mtime +7 -name '*.gz' -print0 | xargs -r0 rm --
find /path/to/ -type f -mtime +7 -name '*.gz' -execdir rm -- '{}' \;

find /path/to/ -type f -mtime +7 -exec rm {} \;
find /path/to/ -mindepth 1 -mtime +7 -delete
find /path/to/ -maxdepth 1 -type f -mtime +7 -mtime -31 -name 'wncw*.gz' -ls -exec rm {} \;

###################################################################
#
#	Common truncate options
#	http://man7.org/linux/man-pages/man1/truncate.1.html
#	https://linoxide.com/linux-how-to/use-truncate-command-linux/
#
###################################################################

for i in file_prefix*; do echo $i;done
for i in file_prefix*; do truncate -s0 $i; done

-c, --no-create --> do not create any files
-o, --io-blocks --> treat SIZE as number of IO blocks instead of bytes
-r, --reference=RFILE --> base size on RFILE
-s, --size=SIZE --> set or adjust the file size by SIZE bytes
--help --> display this help and exit
--version --> output version information and exit

truncate -s 0 file.txt		# Clear contents
truncate -s 100K file.txt	# to a specific size
truncate -s +200K file.txt	# Extend file size
truncate -s -250K file.txt 	# Reduce file size

The SIZE argument is an integer and optional unit (example: 10K is
10*1024).  Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,...
(powers of 1000).

SIZE may also be prefixed by one of the following modifying
characters: '+' extend by, '-' reduce by, '<' at most, '>' at least,
'/' round down to multiple of, '%' round up to multiple of.
-------------------------------------------------


###################################################################
#
# 	Use vars into loop - shell cmd
#
###################################################################

https://www.linuxtechi.com/compare-numbers-strings-files-in-bash-script/
http://mindspill.net/computing/linux-notes/text-manipulation-cut-awk-and-sed/

# Numeric Comparisons
num1 -eq num2                  check if 1st  number is equal to 2nd number
num1 -ge num2                  checks if 1st  number  is greater than or equal to 2nd number
num1 -gt num2                  checks if 1st  number is greater than 2nd number
num1 -le num2                   checks if 1st number is less than or equal to 2nd number
num1 -lt num2                   checks if 1st  number  is less than 2nd number
num1 -ne num2                  checks if 1st  number  is not equal to 2nd number

# Strings Comparisons
var1 = var2     checks if var1 is the same as string var2
var1 != var2    checks if var1 is not the same as var2
var1 < var2     checks if var1 is less than var2
var1 > var2     checks if var1 is greater than var2
-n var1             checks if var1 has a length greater than zero
-z var1             checks if var1 has a length of zero

# Tokenize strings using cut
cut -d[delimiter] -f[field_number] [filename]

Tokenize strings using awk
awk '{print $[n]}'
df | awk '{print $3}' # print 3th column

# create vatiable using terminal
foo=$(date) echo $foo

# Remove a line from some text using sed
sed '[n]d' will remove the [n]th line.
sed '2d'

# Escape spaces with sed / escape all space characters
sed "s/ /\\\ /g" [file]

for i in {1..30}; do if [ $i != 10 ]; then echo "hello $i"; fi; done
echo "1  2  3" | cut -d' ' -f3

// for each file get zise and compare if bigger than 100
for i in *.txt; do foo=$(ls -s $i | cut -d ' ' -f1); echo "foo="$foo; if [ $foo -gt 100 ]; then echo $foo; fi;  ; done


###################################################################
#
# sed Examples
#
###################################################################

# remove quotes from file
sed 's/"//g' test.csv > new.csv
sed 's/"//gw new2.csv' test.csv

http://www.grymoire.com/Unix/Sed.html#uh-36
https://linux.die.net/man/1/sed
https://alvinalexander.com/linux-unix/sed-edit-files-in-place-make-backup-copy
http://sed.sourceforge.net/sed1line.txt

#----------------

my_commands.sed
sed -i.bak -e's/2011/2012/' $filename

# cmd
for file in `cat html_files.txt`
do
  sed -i.bak -f my_commands.sed $file
done

#----------------
https://www.thegeekstuff.com/2009/10/unix-sed-tutorial-how-to-write-to-a-file-using-sed/comment-page-1/
#----------------

# Write 1st line of the file
sed -n '1w output.txt' thegeekstuff.txt

# Write first & last line of the file
sed -n -e '1w output.txt' -e '$w output.txt' thegeekstuff.txt

# Write the lines matches with the pattern Storage or Sysadmin
sed -n -e '/Storage/w output.txt' -e '/Sysadmin/w output.txt' thegeekstuff.txt

# Write the lines from which the pattern matches to till end of the file
sed -n '/Storage/,$w output.txt' thegeekstuff.txt

Write the lines which matches pattern and next two lines from match
sed -n '/Storage/,+2w output.txt' thegeekstuff.txt

###################################################################
#
#   get size folder by extension file
#
###################################################################

du -sh *.jpg
ls -shR *.jpg
du -ch *.jpg | grep total

###################################################################
#
#  Argument list too long when copying files ( argument list too long: cp/scp/rsync )
#  by copying huge amount of data
#
###################################################################

FIX:
for i in *; do cp "$i" ../prjshp/; done
for i in /path/to/dir/*; do cp "$i" /path/to/other/dir/; done

eventually?
find  /home/user/folder/ -name "*.jpg" -exec cp -uf "{}" /your/destination \;




###################################################################
#
#   Delete cmd history Ubuntu
#   https://www.cyberciti.biz/faq/clear-the-shell-history-in-ubuntu-linux/
#
###################################################################

history -c
history -c && history -w
history -d linenumber
history -c && history -w && logout

# or delete echo "$HISTFILE" with
unset HISTFILE

# set max history file
export HISTSIZE=50000
export HISTFILESIZE=50000
export HISTTIMEFORMAT="%d/%m/%y %T "




###############################################
#
#	rm -rf "device or resource busy”
#	rm: cannot remove `html': Device or resource busy
#	https://unix.stackexchange.com/questions/11238/how-to-get-over-device-or-resource-busy
#	https://www.linuxquestions.org/questions/linux-general-1/how-to-remove-a-busy-file-519420/
#	https://github.com/mpartel/bindfs/issues/64
#
###############################################

lsof +D /path
kill(1)

lsof +D /var/www/html
/sbin/fuser -m /var/www/html

lsof +D ./ | awk '{print $2}' | tail -n +2 | xargs kill -9

ps -ef | grep name-of-busy-dir
sudo kill -15 pid-here

umount -l
fuser -vm /home/test13/files


###############################################
#  CentOS 7 Exif ImageMagick
https://www.unixwitch.de/de/sysadmin/tools/exif_tag_script
###############################################

yum install ffmpeg perl-Image-ExifTool

ffmpeg	/usr/bin/ffmpeg
ffprobe	/usr/bin/ffprobe
exiftool	/usr/bin/exiftool

# Synology NAS & Exif Tool CMD
/usr/bin/exiftool /volume1/Fotografie/1_Pictures/ -q -r -t -f -S -n -fileName -Model -FocalLength -ExposureTime -FNumber -ISO -BrightnessValue -LensID -createdate -FileSize -ext ".CR2" -ext ".NEF" > /volume1/Fotografie/1_Pictures/Exif3.txt

###############################################
Selecting Frames in ImageMagick
https://imagemagick.org/script/command-line-processing.php
###############################################

magick 'images.gif[0]' image.png
magick 'images.gif[0-3]' images.mng