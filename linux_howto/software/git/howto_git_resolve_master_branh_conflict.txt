
#######################################################
#
# 	Get changes from master into branch in Git
# 	... have 1 and 8 different commits each, respectively.
#
#######################################################

git dev
git reset --hard HEAD~2
git status
git merge master
git stash
git pull
# CONFLICT (content): Merge conflict in ...
# top half - branch you a merging into
# from the commit that you are trying to merge in
git commit -am "solved conflict"
# fatal: cannot do a partial commit during a merge.

-----------------
alternativ ideas
-----------------
# remove the last commit
git reset --hard HEAD^

# remove the last two commits.
git reset --hard HEAD~2

# throw away any uncommitted changes
git reset --hard HEAD

# Get changes from master into branch in Git
git checkout aq
git rebase master

# Get changes from master into branch in Git
git checkout aq
git merge origin/master

# --
# First, rewinding head to replay your work on top of it...
# Fast-forwarded develop to master.
# --

# 'git merge' failed .....

# Your branch and 'origin/develop' have diverged,
# and have 1 and 8 different commits each, respectively.
# (use "git pull" to merge the remote branch into yours)
# nothing to commit, working directory clean

# short way
git log HEAD..origin/master
git merge origin/master
git rebase origin/master
git pull --rebase
git pull --rebase origin/master

#  You will lose all changes not yet pushed to origin/master.
git reset --hard origin/master



git reset --hard HEAD~3  # Go back in time, throwing away 3 changes
git reset --soft HEAD~3  # Set HEAD to point to an earlier commit
git reset --hard  # Wipe out differences in the working tree
git stash
git checkout -b new-branch HEAD~3   # head back in time!
git branch -D master  # goodbye old master (still in reflog)
git branch -m new-branch master  # the new-branch is now my master
git reset --hard HEAD@{1}   # restore from reflog before the change


git stash  # because it's always a good thing to do
git reset --hard HEAD~3  # go back in time
git reset --hard HEAD@{1}  # oops, that was a mistake, undo it!
git stash apply  # and bring back my working tree changes


resources
https://www.atlassian.com/git/tutorials/saving-changes/git-stash
https://www.atlassian.com/git/tutorials/undoing-changes/git-reset
http://www.artificialworlds.net/presentations/difficult-merges-in-git/difficult-merges-in-git.html
https://jwiegley.github.io/git-from-the-bottom-up/3-Reset/4-doing-a-hard-reset.html
https://www.theserverside.com/video/How-to-use-the-git-reset-hard-command-to-change-a-commit-history











