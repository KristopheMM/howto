####################################################################
# save your uncommited changes
# git switch branch without discarding local changes
# https://github.com/rotati/wiki/wiki/How-we-use-master,-staging-and-stable-branch-in-Github
####################################################################

git stash
git stash apply
git stash clear
git stash list
git stash apply stash@{x}

How to test a merge without actually merging first

git reset --merge
git merge --abort
git rebase --abort
git merge --ff-only

####################################################################
#
#   Git unstage last commits
#
####################################################################

 Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)
Untracked files:
  (use "git add <file>..." to include in what will be committed)



#######################################################################
#
#   git statistics
#
#######################################################################

https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/1838938#1838938
https://stackoverflow.com/questions/9839083/git-number-of-commits-per-author-on-all-branches

git log --pretty=format:"author: %an, %ae %n commiter: %cn, %ce %n --------------- %n Info: %s"
git log --graph --oneline --full-history --all
git log --graph --full-history --all

# pretty v1
git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'

# pretty v2
git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'

# pretty v3
git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n'' %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

# count total commits by branchname
git log branchname --pretty=oneline | wc -l
git rev-list --all | wc -l
git log --all --format=%h | wc -l

# count total commits by user
git shortlog -s
git shortlog -s -n

# get commits by day
git log --pretty=format:%cd --date=short | uniq -c
git log --pretty=format:%cd --date=short | uniq -c | grep -i '2019'

# top commits DESC + Email
git shortlog -s -n --all --no-merges
git shortlog -s -n -e --all --no-merges
git shortlog -s -n -e --all --no-merges --since="22 Aug 2018" --before="01 Feb 2019"

###################################################
#
#	Viewing Unpushed Git Commits - uncommited unmerged changes
#
###################################################

https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
https://makandracards.com/makandra/927-git-see-all-unpushed-commits-or-commits-that-are-not-in-another-branch

git log origin/master..HEAD --graph --oneline --all --decorate --color
git diff origin/master..HEAD
git log origin..


git log --branches --not --remotes
git log --branches --not --remotes --simplify-by-decoration --decorate --oneline
git cherry -v