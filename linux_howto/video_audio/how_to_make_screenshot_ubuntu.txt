###############################################
------------------------------
Screen default 1
------------------------------
###############################################

ffmpeg -video_size [resolution] -framerate [framerate] -f x11grab -i :0.0 -f pulse -ac 2 -i [source] myvid_$(date +%s).mkv
ffmpeg -v warning -video_size 1920x1080 -framerate 25 -f x11grab -i :0.0  myvid_$(date +%s).mov
ffmpeg -video_size 1920x1080 -framerate 25 -f x11grab -i :0.0 -f pulse -ac 2 -i 0 myvid_$(date +%s).mov
ffmpeg -video_size 1920x1080 -f x11grab -i :0 -y -r 10 myvid_$(date +%s).mov
ffmpeg -f x11grab -video_size 1920x1080 -framerate 25 -i :0.0 myvid_$(date +%s).mov

#--------------------------------
Capturing your Desktop / Screen Recording
#--------------------------------

ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 output.mp4
ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 -f alsa -ac 2 -i hw:0 output.mkv
ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 -f pulse -ac 2 -i default output.mkv

https://trac.ffmpeg.org/wiki/Capture/Desktop
https://trac.ffmpeg.org/wiki/Encode/VP8
https://trac.ffmpeg.org/wiki/Encode/VP9
http://www.ubuntubuzz.com/2016/11/3-ffmpeg-command-lines-for-screen-recording-audio-gnulinux-mkv-webm-ogv-formats.html
https://gist.github.com/mrdoob/1325393/afb0c2bb87043f910f7b941cbbef90a8394644ee
https://unix.stackexchange.com/questions/73622/how-to-get-near-perfect-screen-recording-quality
https://www.virag.si/2012/11/streaming-live-webm-video-with-ffmpeg/

#--------------------------------
Record Video
#--------------------------------

# Record Video + Audio to MKV Format
ffmpeg -video_size 1366x768 -framerate 25 -f x11grab -i :0.0 -f pulse -ac 2 -i default myvideo_$(date +%d_%B_%Y_%H:%M).mkv

# Record Video + Audio to WEBM Format
ffmpeg -video_size 1366x768 -framerate 25 -f x11grab -i :0.0 -f pulse -ac 2 -i default -vcodec vp8 -acodec libvorbis myvideo_$(date +%d_%B_%Y_%H:%M).webm


# Record Video + Audio to OGV Format
ffmpeg -video_size 1366x768 -framerate 6 -f x11grab -i :0.0 -f pulse -ac 2 -i default -codec:v libtheora -qscale:v 7 -codec:a libvorbis -qscale:a 5  myvideo_$(date +%d_%B_%Y_%H:%M).ogv


###############################################
------------------------------
Screen follow mouse and crop region
------------------------------
###############################################

https://de.wikipedia.org/wiki/Common_Intermediate_Format

CIF	CIF	352	×	288	11∶9
2CIF	2 CIF	704	×	288	22:9
4CIF	2×2 CIF	704	×	576	11∶9

ffmpeg -f x11grab  -follow_mouse centered -show_region 1 -framerate 25 -video_size 4cif -i :0.0 xmvid_$(date +%s).mov





###############################################
------------------------------
# virtualbox
------------------------------
###############################################

ffmpeg -f x11grab -video_size 1920x1080 -framerate 5 -i :0.0 myvid_$(date +%s).mov

convert
ffmpeg -i myvid.mov -ss 00:00:59 -threads 2 -preset ultrafast -y myvid2.mov
ffmpeg -i myvid.mov -r 30 -ss 00:00:59 -threads 2 -preset ultrafast -y myvid2.mov

###############################################
------------------------------
Screen default 2
------------------------------
###############################################

ffmpeg -f x11grab -video_size 1366x768 -r 25 -i :0.0+1920,300 myvid_$(date +%s).mov

###############################################
#--------------------------------
# concat
#--------------------------------
###############################################

touch mylist.txt

file myfile1.mov
file myfile2.mov
file myfile3.mov

$ ffmpeg -f concat -i mylist.txt -c copy output.mov

###############################################
#--------------------------------
capture screen
#--------------------------------
###############################################

ffmpeg -f x11grab -s xga -r 30 -i :0.0 -qscale 0.1 -vcodec huffyuv grab.avi
ffmpeg -f x11grab -s SZ -r 30 -i :0.0 -qscale 0 -vcodec huffyuv grab.avi

ffmpeg -f x11grab -video_size 1920x1080 -framerate 30 -i :1 \
       -vcodec libx264 -preset ultrafast -qp 0 -pix_fmt yuv444p \
       video.mkv

capture screen and webcam overlay

ffmpeg -f x11grab -thread_queue_size 64 -video_size 1920x1080 -framerate 30 -i :1 \
       -f v4l2 -thread_queue_size 64 -video_size 320x180 -framerate 30 -i /dev/video0 \
       -filter_complex 'overlay=main_w-overlay_w:main_h-overlay_h:format=yuv444' \
       -vcodec libx264 -preset ultrafast -qp 0 -pix_fmt yuv444p \
       video.mkv


https://askubuntu.com/questions/107726/how-to-create-animated-gif-images-of-a-screencast
https://unix.stackexchange.com/questions/113695/gif-screencasting-the-unix-way
https://github.com/phw/peek
https://github.com/lolilolicon/FFcast2
https://github.com/naelstrof/slop
https://www.ffmpeg.org/ffmpeg-filters.html#Examples-78
https://github.com/thevangelist/FFMPEG-gif-script-for-bash
https://github.com/thevangelist/FFMPEG-gif-script-for-bash/blob/master/gifenc.sh
https://github.com/phw/peek

https://itsfoss.com/best-gif-recorder-linux/
https://askubuntu.com/users/74792/cristian-ciupitu
https://www.maketecheasier.com/record-screen-as-animated-gif-ubuntu/


## Peek
sudo add-apt-repository ppa:peek-developers/stable
sudo apt update
sudo apt install peek

## Byzanz
sudo apt-get install byzanz
byzanz-record --duration=15 --x=200 --y=300 --width=700 --height=400 out.gif
byzanz-record-window
byzanz-record-region

## FFMPEG video2gif
ffmpeg -i [inputvideo_filename] -pix_fmt rgb24 [output.gif]
ffmpeg -i Untitled_Screencast.webm -r 1 -pix_fmt rgb24 out.gif
ffmpeg -i Untitled_Screencast.webm -fs 5000k -pix_fmt rgb24 out.gif
ffmpeg -i Untitled_Screencast.webm -loop_output 0 -r 5 -s 320x200 -pix_fmt rgb24 out.gif
convert output.gif -fuzz 8% -layers Optimize finalgif.gif

-- direct convert
ffmpeg -ss 30 -t 3 -i input.flv -i palette.png -filter_complex "fps=10,scale=320:-1:flags=lanczos[x];[x][1:v]paletteuse" output.gif
ffmpeg -y -ss 30 -t 3 -i input.flv -vf fps=10,scale=320:-1:flags=lanczos,palettegen palette.png
ffmpeg -i input.flv -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - output.gif
ffmpeg -i input.flv -vf scale=320:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - gif:- | convert -layers Optimize - output.gif

-- from frames
ffmpeg -i input -vf scale=320:-1:flags=lanczos,fps=10 frames/ffout%03d.png
convert -loop 0 frames/ffout*.png output.gif
convert -delay 5 -loop 0 -dither None -colors 80 "frames/ffout*.png" -fuzz "40%" -layers OptimizeFrame "output.gif"

-- palette usage
#!/bin/bash
palette="/tmp/palette.png"
filters="fps=15,scale=320:-1:flags=lanczos"
ffmpeg -i input.flv -vf "$filters,palettegen" -y $palette
ffmpeg -i input.flv -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y output.gif


-- palette usage
palette="$(mktemp /tmp/ffmpeg2gifXXXXXX.png)"
filters="fps=$4,scale=$3:-1:flags=lanczos"
ffmpeg -v warning -i "$1" -vf "$filters,palettegen" -y "$palette"
ffmpeg -v warning -i "$1" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$2"
rm -f "$palette"



#-------------------------------------------------------------------------------
# --------- ffcast
#!/bin/bash
TMP_AVI=$(mktemp /tmp/outXXXXXXXXXX.avi)
ffcast -s % ffmpeg -y -f x11grab -show_region 1 -framerate 15 \
    -video_size %s -i %D+%c -codec:v huffyuv                  \
    -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" $TMP_AVI         \
&& convert -set delay 10 -layers Optimize $TMP_AVI out.gif

# alternatives
ffcast -w % ffmpeg -f x11grab -show_region 1 -framerate 20 -video_size %s -i %D+%c -codec:v huffyuv -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" out.avi
ffmpeg -i out.avi -pix_fmt rgb24 out.gif
convert -limit memory 1 -limit map 1 -layers Optimize out.gif out_optimised.gif


##
#!/bin/bash
read -r X Y W H G ID < <(slop -f "%x %y %w %h %g %i")
TMP_AVI=$(mktemp /tmp/outXXXXXXXXXX.avi)
ffmpeg -s "$W"x"$H" -y -f x11grab -i :0.0+$X,$Y -vcodec huffyuv -r 25 $TMP_AVI && convert -set delay 5 -layers Optimize $TMP_AVI out.gif





#--------------------------------
Gnome Shell and Wayland: Python
#--------------------------------

#!/usr/bin/env python3
from dbus import SessionBus, Interface
from os import getcwd, path
from sys import argv

BUS_NAME = 'org.gnome.Shell.Screencast'
PATH_NAME = '/org/gnome/Shell/Screencast'
INTERFACE_NAME = BUS_NAME
PIPELINE='x264enc pass=qual quantizer=0 speed-preset=ultrafast ! queue ! matroskamux'

if path.isabs(argv[1]):
    name = argv[1]
else:
    name = path.join(getcwd(), argv[1])

bus = SessionBus()
screen_cast = bus.get_object(BUS_NAME, PATH_NAME)
screen_cast = Interface(screen_cast, INTERFACE_NAME)

ret, name = screen_cast.Screencast(name, {'pipeline': PIPELINE})

if not ret:
    print('Error starting screencast.')
    raise SystemExit(1)

try:
    i = input()
except (EOFError, KeyboardInterrupt):
    pass
finally:
    screen_cast.StopScreencast()


#--------------------------------
Streaming live WebM video with FFmpeg
#--------------------------------

# webcam
ffmpeg -f video4linux2 -s 640x480 -r 25 -i /dev/video0 -f alsa -i pulse http://localhost:8090/feed1.ffm

# screen
ffmpeg -f x11grab -r 25 -s 1280x800 -i :0.0 -f alsa -i pulse http://localhost:8090/feed1.ffm

# get webcam capabilities
ffmpeg -f video4linux2 -list_formats all -i /dev/video0

# ffmpeg: recording the screen.
ffmpeg -f x11grab -r 25 -s 640x480 -i :0.0+1,53 out.webm




