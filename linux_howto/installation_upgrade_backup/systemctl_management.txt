##############################################################################
#
#	How To Use Systemctl to Manage Systemd Services and Units
#
##############################################################################

sudo systemctl start application.service
sudo systemctl start application
sudo systemctl stop application.service
sudo systemctl restart application.service
sudo systemctl reload application.service
sudo systemctl reload-or-restart application.service
sudo systemctl enable application.service
sudo systemctl disable application.service
sudo systemctl status application.service
sudo systemctl is-active application.service
sudo systemctl is-enabled application.service
sudo systemctl is-failed application.service

systemctl list-units
systemctl
systemctl list-units --all
systemctl list-units --all --state=inactive
systemctl list-units --type=service
systemctl list-unit-files

systemctl cat atd.service
systemctl list-dependencies sshd.service
systemctl show sshd.service
systemctl show sshd.service -p Conflicts
sudo systemctl mask nginx.service
systemctl list-unit-files
sudo systemctl start nginx.service
sudo systemctl unmask nginx.service
sudo systemctl edit nginx.service
sudo systemctl edit --full nginx.service

sudo rm -r /etc/systemd/system/nginx.service.d
sudo rm /etc/systemd/system/nginx.service
sudo systemctl daemon-reload

systemctl get-default
sudo systemctl set-default graphical.target
systemctl list-unit-files --type=target
systemctl list-units --type=target
systemctl list-dependencies multi-user.target
sudo systemctl isolate multi-user.target

sudo systemctl rescue
sudo systemctl halt
sudo systemctl poweroff
sudo systemctl reboot
sudo reboot


To start a service, simply use the start keyword:
systemctl start <service name>

Similarly, you can restart a service if it has failed, or if its configuration has changed:
systemctl restart <service name>

To stop a service, use stop:
systemctl stop <service name>

To enable the service at boot, you can use the enable keyword:
systemctl enable <service name>

And finally, you can disable a service to keep it from starting at boot:
systemctl disable <service name>

https://latesthackingnews.com/2016/11/10/5-linux-commands-every-linux-newbie-must-know/
https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units





------------------------------------------------------------------------
systemctl Cheat Sheet RHEL_482736_1118
https://access.redhat.com/sites/default/files/attachments/12052018_systemd_6.pdf
------------------------------------------------------------------------
Copyright © 2018 Red Hat, Inc.
Red Hat, Red Hat Enterprise Linux,
the Shadowman logo, and JBoss
are trademarks of Red Hat, Inc.,
registered in the U.S. and other
countries. Linux® is the registered
trademark of Linus Torvalds in the
U.S. and other countries.


VIEWING systemd INFORMATION
systemctl list-dependencies Show a unit’s dependencies
systemctl list-sockets List sockets and what activates
systemctl list-jobs View active systemd jobs
systemctl list-unit-files See unit files and their states
systemctl list-units Show if units are loaded/active
systemctl get-default List default target (like run level)

WORKING WITH SERVICES
systemctl stop service Stop a running service
systemctl start service Start a service
systemctl restart service Restart a running service
systemctl reload service Reload all config files in service
systemctl daemon-reload Must run to reload changed unit files
systemctl status service See if service is running/enabled
systemctl --failed Shows services that failed to run
systemctl reset-failed Resets any units from failed state
systemctl enable service Enable a service to start on boot
systemctl disable service Disable service--won’t start at boot
systemctl show service Show properties of a service (or other unit)
systemctl edit service Create snippit to drop in unit file
systemctl edit --full service Edit entire unit file for service
systemctl -H host status network Run any systemctl command remotely

CHANGING SYSTEM STATES
systemctl reboot Reboot the system (reboot.target)
systemctl poweroff Power off the system (poweroff.target)
systemctl emergency Put in emergency mode (emergency.target)
systemctl default Back to default target (multi-user.target)

VIEWING LOG MESSAGES
journalctl Show all collected log messages
journalctl -u network.service See network service messages
journalctl -f Follow messages as they appear
journalctl -k Show only kernel messages

USING UNIT FILES
Besides services, most systemd commands can work with these unit types: paths,
slices, snapshots, sockets, swaps, targets, and timers



------------------------------------------------------------------------
System herunterfahren
https://www.debian.org/releases/stretch/amd64/ch08s01.html.de
https://linuxize.com/post/reboot-linux-using-command-line/
------------------------------------------------------------------------
sudo systemctl --no-wall reboot
sudo systemctl --message="Hardware upgrade" reboot
sudo systemctl reboot -i
sudo systemctl poweroff
sudo shutdown -r now
sudo shutdown -r
sudo shutdown -r 10:00
sudo shutdown -r +5
sudo shutdown -r +10 "Hardware upgrade"
sudo shutdown -c
sudo shutdown -c "Canceling the reboot"


