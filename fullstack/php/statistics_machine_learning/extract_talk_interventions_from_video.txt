youtube-dl -F https://www.youtube.com/watch?v=U6qYrm61Pw8
youtube-dl --format 136 https://www.youtube.com/watch?v=U6qYrm61Pw8

ffmpeg -i SXSW-2019-U6qYrm61Pw8.mp4 -r 1 SXSW/frame%d.jpg
ll SXSW/*.jpg | wc -l

find . -name "*.jpg" | xargs mogrify -resize 50%


----------------------------------------------------------------


http://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html
https://www.tensorflow.org/tutorials/sequences/audio_recognition
https://www.tensorflow.org/tutorials/images/hub_with_keras
http://scikit-image.org/docs/stable/auto_examples/index.html
https://keras.io/preprocessing/image/
http://scikit-image.org/docs/dev/auto_examples/
https://www.programcreek.com/python/example/57116/PIL.ImageFilter.BLUR
https://opensource.com/article/19/3/python-image-manipulation-tools
https://www.programcreek.com/python/example/95063/PIL.ImageFilter.GaussianBlur
https://medium.com/@enzoftware/how-to-build-amazing-images-filters-with-python-median-filter-sobel-filter-%EF%B8%8F-%EF%B8%8F-22aeb8e2f540
http://scipy-lectures.org/advanced/image_processing/
https://pillow.readthedocs.io/en/3.0.x/reference/ImageFilter.html
https://scikit-learn.org/stable/auto_examples/index.html
https://matplotlib.org/gallery/images_contours_and_fields/image_clip_path.html#sphx-glr-gallery-images-contours-and-fields-image-clip-path-py
http://scikit-image.org/docs/stable/auto_examples/filters/plot_frangi.html
http://scikit-image.org/docs/stable/auto_examples/filters/plot_denoise.html
http://scikit-image.org/docs/stable/api/skimage.filters.html#skimage.filters.hessian
https://docs.python-guide.org/scenarios/imaging/
http://scikit-image.org/docs/stable/auto_examples/segmentation/plot_rag_mean_color.html#sphx-glr-auto-examples-segmentation-plot-rag-mean-color-py

.....................

from skimage.data import camera
from skimage.filters import frangi, hessian
import matplotlib.pyplot as plt
image = camera()
fig, ax = plt.subplots(ncols=3)
ax[0].imshow(image, cmap=plt.cm.gray)
ax[0].set_title('Original image')
ax[1].imshow(frangi(image), cmap=plt.cm.gray)
ax[1].set_title('Frangi filter result')
ax[2].imshow(hessian(image), cmap=plt.cm.gray)
ax[2].set_title('Hybrid Hessian filter result')
for a in ax:
    a.axis('off')

plt.tight_layout()
plt.show()

................

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.cbook as cbook
with cbook.get_sample_data('grace_hopper.png') as image_file:
    image = plt.imread(image_file)
fig, ax = plt.subplots()
im = ax.imshow(image)
patch = patches.Circle((260, 200), radius=200, transform=ax.transData)
im.set_clip_path(patch)
ax.axis('off')
plt.show()

..................

from PIL import Image, ImageFilter
#Read image
im = Image.open( 'image.jpg' )
#Display image
im.show()

#Applying a filter to the image
im_sharp = im.filter( ImageFilter.SHARPEN )
#Saving the filtered image to a new file
im_sharp.save( 'image_sharpened.jpg', 'JPEG' )

#Splitting the image into its respective bands, i.e. Red, Green,
#and Blue for RGB
r,g,b = im_sharp.split()

#Viewing EXIF data embedded in image
exif_data = im._getexif()
exif_data
