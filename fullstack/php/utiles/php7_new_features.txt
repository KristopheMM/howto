########################################################################################
#
#   php7-new-features
#   https://www.udemy.com/php7-new-features/learn/v4/t/lecture/4647328?start=0
#
########################################################################################


............................................

function parse (int ... $in){  } // array|bool|string|int
parse(true,'22.22',90);

............................................

# http://php.net/manual/en/class.callbackfilteriterator.php#callbackfilteriterator.examples

function parse(callable $callback)
$func = function(){}
parse($func)

............................................

interfce checker{}
class cake implements checker{}
class salad implements checker {}
function restaurant(checker $food){
	echo var_dump($food);
}
$box = new cake;
restaurant($box);

............................................

class cake{
	function icing(self $thiscake = new cake){
		var_dump($thiscake)
	}
}
$cake1 = new cake;
$cake2 = new cake;
$cake2->icing(cake1);

............................................

function dataReturn():int{ // array|bool|string|int
	return 29;
}
var_dump(dataReturn());

............................................

function is object

............................................

class myObj{
	functio dataReturn(self $obj):self{
 		return $obj;
	}
	functio dataReturn($obj = new myObj):self{
 		return $obj;
	}
}
$a = new myObj;
$a->dataReturn();
$a->dataReturn(new myObj);

............................................

# http://php.net/manual/en/language.operators.precedence.php
right	??	comparison

var1 ?? var2 ?? var3
............................................

Spaceship # http://php.net/manual/en/language.operators.comparison.php

$a <=> $b

array(2,2)<=>array(4,7)

// -1 less tahn
// 0 equal
// 1 greater than
............................................

# http://php.net/manual/en/function.define.php

define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));

............................................

anonymous class
$fn = new class("test"){

	function __construct($va){$this->vaP = $va}
	private $vaP;
 	private function print()
	static function hello()
}
$fn->print()
$fn::hello()

............................................

class myOBJ{ public $hello = "say hello";}
interface reg{ public function print();}
$fn = new class ("test") extends myOBJ implements reg{}

............................................

unserialize($data,["allowed_classes"]=>["newObj"]]);

............................................

# http://php.net/manual/de/function.assert.php

ini_set("assert.exeption",1)
class HandleError extends AssertionError{}
assert(is_numeric($num),"This is an error string")


// Active assert and make it quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Assertion failed at $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Set up the callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('2 < 1');
assert('2 < 1', 'Two is less than one');




............................................

namespace ava/comp;
use ava\comp as avx;
$obj1 = new ava\comp\hello;

............................................

# http://php.net/manual/en/function.intdiv.php

var_dump(intdiv(3, 2));
var_dump(intdiv(-3, 2));
var_dump(intdiv(3, -2));
var_dump(intdiv(-3, -2));
var_dump(intdiv(PHP_INT_MAX, PHP_INT_MAX));
var_dump(intdiv(PHP_INT_MIN, PHP_INT_MIN));
var_dump(intdiv(PHP_INT_MIN, -1));
var_dump(intdiv(1, 0));

............................................

# http://php.net/manual/en/function.session-start.php

session_start([
    'cookie_lifetime' => 86400,
    'read_and_close'  => true,
]);

............................................

# http://php.net/manual/en/function.random-bytes.php
# http://php.net/manual/en/function.random-int.php

$bytes = random_bytes(5);
var_dump(bin2hex($bytes));

var_dump(random_int(100, 999));
var_dump(random_int(-1000, 0));

............................................

# http://php.net/manual/de/function.preg-replace-callback-array.php

$subject = 'Aaaaaa Bbb';
preg_replace_callback_array(
    [
        '~[a]+~i' => function ($match) {
            echo strlen($match[0]), ' matches for "a" found', PHP_EOL;
        },
        '~[b]+~i' => function ($match) {
            echo strlen($match[0]), ' matches for "b" found', PHP_EOL;
        }
    ],
    $subject
);
............................................

function gen(){
    yield ...
}

gen->curent()
gen->next()
gen->send()

............................................

# http://php.net/manual/de/function.stream-get-meta-data.php

$url = 'http://www.example.com/';
if (!$fp = fopen($url, 'r')) {
    trigger_error("Unable to open URL ($url)", E_USER_ERROR);
}
$meta = stream_get_meta_data($fp); // <------
print_r($meta);
fclose($fp);














