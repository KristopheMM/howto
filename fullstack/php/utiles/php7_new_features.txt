########################################################################################
#
#   php8-new-features - PHP8 RFC: JIT - just-in-time (JIT) compilers
#   https://www.udemy.com/php7-new-features/learn/v4/t/lecture/4647328?start=0
#
########################################################################################

https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/
https://stitcher.io/blog/php-jit
https://www.youtube.com/watch?v=dWH65pmnsrI
https://stitcher.io/blog/new-in-php-8#jit-rfc
https://externals.io/message/107361
https://github.com/php/php-src/pull/4769
https://wiki.php.net/rfc/engine_warnings
https://www.php.net/manual/en/function.fmod.php
https://wiki.php.net/rfc/uniform_variable_syntax
https://wiki.php.net/rfc/jit
https://stitcher.io/blog/new-in-php-8

// Union types -> public function foo(Foo|Bar $input): int|float;
public function foo(Foo|null $foo): void;
public function bar(?Bar $bar): void;

// Static return type
class Foo
{
    public function test(): static
    {
        return new static();
    }
}


// Weak maps
class Foo
{
    private WeakMap $cache;
    public function getSomethingWithCaching(object $obj): object
    {
        return $this->cache[$obj]
           ??= $this->computeSomethingExpensive($obj);
    }
}

// ::class on objects
$foo = new Foo();
var_dump($foo::class);


// Create DateTime objects from interface
DateTime::createFromInterface(DateTimeInterface $other);
DateTimeImmutable::createFromInterface(DateTimeInterface $other);


// Reflection method signature changes
// support both PHP 7 and PHP 8
ReflectionClass::newInstance($arg = null, ...$args);
ReflectionFunction::invoke($arg = null, ...$args);
ReflectionMethod::invoke($object, $arg = null, ...$args);

########################################################################################
#
#   php7-new-features
#   https://www.udemy.com/php7-new-features/learn/v4/t/lecture/4647328?start=0
#
########################################################################################

............................................

function parse (int ... $in){  } // array|bool|string|int
parse(true,'22.22',90);

............................................

# http://php.net/manual/en/class.callbackfilteriterator.php#callbackfilteriterator.examples

function parse(callable $callback)
$func = function(){}
parse($func)

............................................

interfce checker{}
class cake implements checker{}
class salad implements checker {}
function restaurant(checker $food){
	echo var_dump($food);
}
$box = new cake;
restaurant($box);

............................................

class cake{
	function icing(self $thiscake = new cake){
		var_dump($thiscake)
	}
}
$cake1 = new cake;
$cake2 = new cake;
$cake2->icing(cake1);

............................................

function dataReturn():int{ // array|bool|string|int
	return 29;
}
var_dump(dataReturn());

............................................

function is object

............................................

class myObj{
	functio dataReturn(self $obj):self{
 		return $obj;
	}
	functio dataReturn($obj = new myObj):self{
 		return $obj;
	}
}
$a = new myObj;
$a->dataReturn();
$a->dataReturn(new myObj);

............................................

# http://php.net/manual/en/language.operators.precedence.php
right	??	comparison

var1 ?? var2 ?? var3
............................................

Spaceship # http://php.net/manual/en/language.operators.comparison.php

$a <=> $b

array(2,2)<=>array(4,7)

// -1 less tahn
// 0 equal
// 1 greater than
............................................

# http://php.net/manual/en/function.define.php

define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));

............................................

anonymous class
$fn = new class("test"){

	function __construct($va){$this->vaP = $va}
	private $vaP;
 	private function print()
	static function hello()
}
$fn->print()
$fn::hello()

............................................

class myOBJ{ public $hello = "say hello";}
interface reg{ public function print();}
$fn = new class ("test") extends myOBJ implements reg{}

............................................

unserialize($data,["allowed_classes"]=>["newObj"]]);

............................................

# http://php.net/manual/de/function.assert.php

ini_set("assert.exeption",1)
class HandleError extends AssertionError{}
assert(is_numeric($num),"This is an error string")


// Active assert and make it quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Assertion failed at $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Set up the callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('2 < 1');
assert('2 < 1', 'Two is less than one');




............................................

namespace ava/comp;
use ava\comp as avx;
$obj1 = new ava\comp\hello;

............................................

# http://php.net/manual/en/function.intdiv.php

var_dump(intdiv(3, 2));
var_dump(intdiv(-3, 2));
var_dump(intdiv(3, -2));
var_dump(intdiv(-3, -2));
var_dump(intdiv(PHP_INT_MAX, PHP_INT_MAX));
var_dump(intdiv(PHP_INT_MIN, PHP_INT_MIN));
var_dump(intdiv(PHP_INT_MIN, -1));
var_dump(intdiv(1, 0));

............................................

# http://php.net/manual/en/function.session-start.php

session_start([
    'cookie_lifetime' => 86400,
    'read_and_close'  => true,
]);

............................................

# http://php.net/manual/en/function.random-bytes.php
# http://php.net/manual/en/function.random-int.php

$bytes = random_bytes(5);
var_dump(bin2hex($bytes));

var_dump(random_int(100, 999));
var_dump(random_int(-1000, 0));

............................................

# http://php.net/manual/de/function.preg-replace-callback-array.php

$subject = 'Aaaaaa Bbb';
preg_replace_callback_array(
    [
        '~[a]+~i' => function ($match) {
            echo strlen($match[0]), ' matches for "a" found', PHP_EOL;
        },
        '~[b]+~i' => function ($match) {
            echo strlen($match[0]), ' matches for "b" found', PHP_EOL;
        }
    ],
    $subject
);
............................................

function gen(){
    yield ...
}

gen->curent()
gen->next()
gen->send()

............................................

# http://php.net/manual/de/function.stream-get-meta-data.php

$url = 'http://www.example.com/';
if (!$fp = fopen($url, 'r')) {
    trigger_error("Unable to open URL ($url)", E_USER_ERROR);
}
$meta = stream_get_meta_data($fp); // <------
print_r($meta);
fclose($fp);





########################################################################################
PHP 7.4.0 Proposals 28 Nov 2019
########################################################################################
https://wiki.php.net/rfc/spread_operator_for_array
https://wiki.php.net/rfc/arrow_functions_v2
https://wiki.php.net/rfc/typed_properties_v2
https://wiki.php.net/rfc/numeric_literal_separator
https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters
https://wiki.php.net/rfc/preload
https://wiki.php.net/rfc/ffi
https://wiki.php.net/rfc/reference_reflection
https://www.php.net/index.php#id2019-11-28-1

bool, int, float, string, array, object
?type // where "type" may be any of the above


_preload($path, $pattern, $ignore);
opcache_compile_file($path)
_preload(["/var/www/ZendFramework/library"]);





########################################################################################
PHP 7.4 veröffentlicht: Der Guide zu den neuen Features
########################################################################################
https://anastasionico.uk/blog/php-basics
https://entwickler.de/online/php/guide-php-7-4-neue-features-579915619.html
---------------------------
PHP 7.4 types
---------------------------
bool
int
float
string
array
object
Iterable
Self
Parent
--
type classes’ name
interfaces name
nullable type
---------------------------
class User {
    // declaring scalar
    private int $id;
    public string $name;
    // declaring iterable
    public iterable $iterables;
    // desclaring classes and  interfaces
    protected ClassName $classType;
    // desclaring variable with default value
    public string $name = "Nico";
    // desclaring variable with nullable value
    public ?string $void = null;
    // desclaring more variable of same time at once
    public float $x, $y;
    // desclaring using keyword var
    var bool $flag
}


---------------------------
Spread Operator
---------------------------
$mammals = ['bear', 'ape'];
$animals = ['owl', 'crocodile', ...$mammals, 'frog'];

//
function getMammals(){
    return ['bear', 'ape'];
}
$animals = [...getMammals(), 'owl', 'crocodile'];
function generateFungus() {
    $fungus = ['porcino', 'portobello'];
    yield $fungus;
}
$domain = ['bear', 'ape', 'pine', 'lettuce', ...generateFungus()];

---------------------------
Pfeilfunktionen
---------------------------
$mammals = ['bear', 'ape'];
$animals = function($animals) use($mammals){
    return array_merge($animals, $mammals);
};

//
function counterize($domains) {
    return count($domains);
}
$domains = ['bear', 'ape', 'pine', 'lettuce','porcino', 'portobello'];
$plurals = array_map('counterize, $domains);

//
$domain = ['bear', 'ape', 'pine', 'lettuce','porcino', 'portobello'];
$plurals = array_map(fn($domains) => count($domains), $domains);

---------------------------
Null Coalescing Assignment Operator
---------------------------
$animal = $_GET['animal'] ?? 'none';

---------------------------
Covariant Returns und Contravariant Parameter
---------------------------


Class Animal {}
Class Mammals extends Animal {}

Class Factory {
    public function make() :Animal {}
}

Class ChildFactory {
    public function make() :Mammals {}
}

//
Class Animal {}
Class Mammals extends Animal {}

Class Factory {
    public function use(Mammals): {}
}

Class ChildFactory {
    public function make(Animal) {}
}

---------------------------
Numeric Literal Separator
---------------------------

6.674_083e-11; // float
299_792_458; // decimal
0xCAFE_F00D; // hexadecimal
0b0101_1111; // binary


---------------------------
Reflection für Referenzen
---------------------------
final class ReflectionReference {
    /* Returns ReflectionReference if array element is a reference, null otherwise. */
    public static function fromArrayElement(array $array, int|string $key): ?ReflectionReference;
    /* Returns unique identifier for the reference. The return value format is unspecified. */
    public function getId(): int|string;
    private function __construct(); // Always throws
    private function __clone(); // Always throws
}

---------------------------
Password Hashing Registry
---------------------------

print_r(password_algos());
Array (
      [0] => "2y" // Ident for "bcrypt"
      [1] => "argon2i"
      [2] => "argon2id"
  )









