#####################################################
#
#	PHP Promises GuzzleHttp / ReactPHP
#
#####################################################

http://docs.guzzlephp.org/en/latest/faq.html#can-guzzle-send-asynchronous-requests
http://docs.guzzlephp.org/en/stable/
http://docs.guzzlephp.org/en/stable/quickstart.html
http://docs.php-http.org/en/latest/
http://docs.php-http.org/en/latest/components/promise.html
https://afieldguidetoelephpants.net/
https://blog.wyrihaximus.net/2015/04/reactphp-http/
https://de.slideshare.net/MarcMorera/when-symfony-met-promises-167235900
https://de.slideshare.net/wimg/the-promise-of-asynchronous-php
https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_promises.html
https://github.com/guzzle/promises
https://github.com/guzzle/promises/issues/44
https://github.com/php-http/documentation
https://github.com/reactphp/http
https://github.com/reactphp/promise
https://github.com/reactphp/promise/issues/43
https://github.com/request/request-promise
https://itnext.io/async-and-await-in-javascript-the-extension-to-a-promise-f4e0048964ac
https://larachat.co/events/january-php-meetup-promises-promises-with-cal-evans
https://medium.com/async-php/reactive-php-events-d0cd866e9285
https://reactphp.org/
https://reactphp.org/promise/
https://robertbasic.com/blog/reacting-to-promises/
https://sergeyzhuk.me/2017/06/16/phpreact-promises/
https://sergeyzhuk.me/2017/07/17/reatcphp-http-server/
https://sergeyzhuk.me/2017/08/22/reactphp-promise-timers/
https://sergeyzhuk.me/2017/12/20/reactphp-http-middleware/
https://sergeyzhuk.me/2018/01/16/reactphp-managing-promises/
https://thinkster.io/tutorials/iterating-and-rendering-loops-in-react
https://voicesoftheelephpant.com/
https://www.freecodecamp.org/news/promise-all-in-javascript-with-example-6c8c5aea3e32/
https://www.newline.co/fullstack-react/30-days-of-react/day-15/
https://www.reddit.com/r/PHP/comments/8lne5f/why_does_php_have_promises_libraries/
https://stackoverflow.com/questions/31426740/how-to-return-many-promises-in-a-loop-and-wait-for-them-all-to-do-other-stuff
https://hotexamples.com/de/examples/-/-/GuzzleHttp%5CPromise%5Call/php-guzzlehttp%5Cpromise%5Call-function-examples.html
https://docs.aws.amazon.com/aws-sdk-php/v3/api/function-GuzzleHttp.Promise.all.html
https://docs.amazonaws.cn/zh_cn/aws-sdk-php/guide/latest/guide/promises.html
https://codeandtalk.com/v/zendcon-2015/asynchronous-api-interaction-with-guzzle-session-zendcon-2015
http://docs.guzzlephp.org/en/latest/quickstart.html
https://github.com/guzzle/promises/issues/57
https://hotexamples.com/de/examples/-/-/GuzzleHttp%5CPromise%5Cqueue/php-guzzlehttp%5Cpromise%5Cqueue-function-examples.html
https://hotexamples.com/de/examples/-/-/GuzzleHttp%5CPromise%5Cqueue/php-guzzlehttp%5Cpromise%5Cqueue-function-examples.html
https://github.com/guzzle/promises




----------------------------------------------------
// Can Guzzle send asynchronous requests?
----------------------------------------------------
Yes. You can use the requestAsync, sendAsync, getAsync, headAsync, putAsync, postAsync, deleteAsync, and patchAsync methods of a client to send an asynchronous request. The client will return a GuzzleHttp\Promise\PromiseInterface object. You can chain then functions off of the promise.

$promise = $client->requestAsync('GET', 'http://httpbin.org/get');
$promise->then(function ($response) {
echo 'Got a response! ' . $response->getStatusCode(); });
You can force an asynchronous response to complete using the wait() method of the returned promise.

$promise = $client->requestAsync('GET', 'http://httpbin.org/get');
$response = $promise->wait();

----------------------------------------------------
// php GuzzleHttp
----------------------------------------------------
use GuzzleHttp\Promise\Promise;
$promise = new Promise();
$promise->then(
    // $onFulfilled
    function ($value) {
        echo 'The promise was fulfilled.';
    },
    // $onRejected
    function ($reason) {
        echo 'The promise was rejected.';
    }
);

----------------------------------------------------
// php React
----------------------------------------------------

$statusCodes = new FetchStatusCodes();
$promise = $statusCodes->promise();
$promise
    ->then(
        function($value) {
            var_dump($value);
        },
        function($reason) {
            echo $reason . PHP_EOL;
        }
    );

$urls = [
    'https://example.com/',
    'https://stackoverflow.com/',
    'https://www.google.com/',
    'https://www.google.com/no-such-url',
    'https://www.google.com:81'
];
$statusCodes($urls);

----------------------------------------------------
// php React
----------------------------------------------------

$loop = React\EventLoop\Factory::create();
$server = new React\Http\Server(function (Psr\Http\Message\ServerRequestInterface $request) {
    return new React\Http\Response(
        200,
        array('Content-Type' => 'text/plain'),
        "Hello World!\n"
    );
});
$socket = new React\Socket\Server(8080, $loop);
$server->listen($socket);
echo "Server running at http://127.0.0.1:8080\n";
$loop->run();

----------------------------------------------------
// php GuzzleHttp
----------------------------------------------------
$client = new GuzzleHttp\Client();
$res = $client->request('GET', 'https://api.github.com/user', [
    'auth' => ['user', 'pass']
]);
echo $res->getStatusCode();
// "200"
echo $res->getHeader('content-type')[0];
// 'application/json; charset=utf8'
echo $res->getBody();
// {"type":"User"...'

// Send an asynchronous request.
$request = new \GuzzleHttp\Psr7\Request('GET', 'http://httpbin.org');
$promise = $client->sendAsync($request)->then(function ($response) {
    echo 'I completed! ' . $response->getBody();
});
$promise->wait();

----------------------------------------------------
// php GuzzleHttp
----------------------------------------------------
use GuzzleHttp\Client;
$client = new Client([
    // Base URI is used with relative requests
    'base_uri' => 'http://httpbin.org',
    // You can set any number of default request options.
    'timeout'  => 2.0,
]);

----------------------------------------------------
// php React
----------- -----------------------------------------

require 'vendor/autoload.php';

$loop = React\EventLoop\Factory::create();
$socket = new React\Socket\Server($loop);
$http = new React\Http\Server($socket, $loop);
$http->on('request', function ($request, $response) {
    $response->writeHead(200, array('Content-Type' => 'text/plain'));
    $response->end("Hello World\n");
});

$socket->listen(80);
$loop->run();

----------------------------------------------------
// Making (and Keeping) a Promise
----------------------------------------------------
# https://symfonycasts.com/screencast/javascript/create-your-own-promise
# web/assets/js/RepLogApp.js
# https://symfonycasts.com/screencast/javascript/create-your-own-promise

(function(window, $, Routing) {
    $.extend(window.RepLogApp.prototype, {
        handleNewFormSubmit: function(e) {
            this._saveRepLog(formData)
            .then(function(data) {
            });
        },
        _saveRepLog: function(data) {
            return $.ajax({
                url: Routing.generate('rep_log_new'),
                method: 'POST',
                data: JSON.stringify(data)
            });
        },
    });
})(window, jQuery, Routing);

#src/AppBundle/Controller/RepLogController.php
class RepLogController extends BaseController
{
    public function newRepLogAction(Request $request)
    {
        //$response = $this->createApiResponse($apiModel);
        $response = new Response(null, 204);
    }
}

#src/AppBundle/Controller/RepLogController.php
class RepLogController extends BaseController
{
    public function newRepLogAction(Request $request)
    {
        // setting the Location header... it's a best-practice
        $response->headers->set(
            'Location',
            $this->generateUrl('rep_log_get', ['id' => $repLog->getId()])
        );
    }
}

----------------------------------------------------
// Making the Second AJAX Call
----------------------------------------------------
# web/assets/js/RepLogApp.js

# web/assets/js/RepLogApp.js
(function(window, $, Routing) {
    $.extend(window.RepLogApp.prototype, {
        _saveRepLog: function(data) {
            return $.ajax({
            }).then(function(data, textStatus, jqXHR) {
                $.ajax({
                    url: jqXHR.getResponseHeader('Location')
                }).then(function(data) {
                    console.log('now we are REALLY done');
                    console.log(data);
                });
            });
        },
    });
})(window, jQuery, Routing);













https://medium.com/@ardanirohman/how-to-handle-async-request-concurrency-with-promise-in-guzzle-6-cac10d76220e
---------------------------------------------------
// A. Request with Promise
---------------------------------------------------
use GuzzleHttp\Promise\Promise;

$promise = new Promise();
$promise->then(
    // $onFulfilled
    function ($value) {
        echo 'The promise was fulfilled.';
    },
    // $onRejected
    function ($reason) {
        echo 'The promise was rejected.';
    }
);

---------------------------------------------------
// B. Async Request with Promise
---------------------------------------------------
use GuzzleHttp\Client;
use GuzzleHttp\Promise;

$client = new Client(['base_uri' => 'http://httpbin.org/']);

// Initiate each request but do not block
$promises = [
    'image' => $client->getAsync('/image'),
    'png'   => $client->getAsync('/image/png'),
    'jpeg'  => $client->getAsync('/image/jpeg'),
    'webp'  => $client->getAsync('/image/webp')
];

// Wait on all of the requests to complete. Throws a ConnectException
// if any of the requests fail
$results = Promise\unwrap($promises);

// Wait for the requests to complete, even if some of them fail
$results = Promise\settle($promises)->wait();

// You can access each result using the key provided to the unwrap
// function.
echo $results['image']['value']->getHeader('Content-Length')[0]
echo $results['png']['value']->getHeader('Content-Length')[0]


$promise = $client->getAsync('http://httpbin.org/get');
$promise = $client->deleteAsync('http://httpbin.org/delete');
$promise = $client->headAsync('http://httpbin.org/get');
$promise = $client->optionsAsync('http://httpbin.org/get');
$promise = $client->patchAsync('http://httpbin.org/patch');
$promise = $client->postAsync('http://httpbin.org/post');
$promise = $client->putAsync('http://httpbin.org/put');


unwrap :
waits on all of the provided promises and returns the fulfilled values. Returns an array that contains the value of each promise (in the same order the promises were provided). An exception is thrown if any of the promises are rejected.

all :
given an array of promises, return a promise that is fulfilled when all the items in the array are fulfilled. The promise’s fulfillment value is an array with fulfillment values at respective positions to the original array. If any promise in the array rejects, the returned promise is rejected with the rejection reason.

each :
given an iterator that yields promises or values, returns a promise that is fulfilled with a null value when the iterator has been consumed or the aggregate promise has been fulfilled or rejected.

settle :
 returns a promise that is fulfilled when all of the provided promises have been fulfilled or rejected. The returned promise is fulfilled with an array of inspection state arrays.

---------------------------------------------------
// C. Concurrency in Promise
---------------------------------------------------

use GuzzleHttp\Promise\EachPromise;
use GuzzleHttp\Psr7\Response;

$users = ['one', 'two', 'three'];

$promises = (function () use ($users) {
  foreach ($users as $user) {
    // don't forget using generator
    yield $this->getAsync('https://api.demo.com/v1/users?username=' . $user);
  }
})();

$eachPromise = new EachPromise($promises, [
  // how many concurrency we are use
  'concurrency' => 4,
  'fulfilled' => function (Response $response) {
    if ($response->getStatusCode() == 200) {
      $user = json_decode($response->getBody(), true);
        // processing response of user here
      }
    },
  'rejected' => function ($reason) {
    // handle promise rejected here
  }
]);

$eachPromise->promise()->wait();

---------------------------------------------------
// D. Bonus : improve with cache
---------------------------------------------------
use GuzzleHttp\Promise\EachPromise;
use GuzzleHttp\Promise\FulfilledPromise;
use GuzzleHttp\Psr7\Response;
use Cache;

$users = ['one', 'two', 'three'];
$cache = new Cache();

$promises = (function () use ($users, $cache) {
  foreach ($users as $user) {

    // check cache is exist
    if ($cache->hasItem('cache_user_' . $user)) {
      $profile = $cache->getItem($user)->get();

      yield new FulfilledPromise($profile);
      continue;
  }
    // don't forget using generator
    yield $this->getAsync('https://api.demo.com/v1/users?username=' . $user)
      ->then(function (Response $response) use ($cache, $user) {

          $profile = json_decode($response->getBody(), true);
          // save to cache expiry to 300s
          $cache->put('cache_user_' . $user, $profile, $expiry = 300);

          return $profile;
      });
  }
})();
$eachPromise = new EachPromise($promises, [
  // how many concurrency we are use
  'concurrency' => 4,
  'fulfilled' => function ($profile) {
      // process object profile of user here
    },
  'rejected' => function ($reason) {
    // handle promise rejected here
  }
]);
$eachPromise->promise()->wait();

---------------------------------------------------
// GuzzleHttp Example
---------------------------------------------------
https://jeromejaglale.com/doc/php/laravel_asynchronous_guzzle_requests_using_promises

$client = new \GuzzleHttp\Client();

// start request
$promise = $client->getAsync('http://loripsum.net/api')->then(
    function ($response) {
        return $response->getBody();
    }, function ($exception) {
        return $exception->getMessage();
    }
);

// do other things
echo '<b>This will not wait for the previous request to finish to be displayed!</b>';

// wait for request to finish and display its response
$response = $promise->wait();
echo $response;

---------------------------------------------------
// Example 2: two Guzzle requests in parallel
---------------------------------------------------

$client = new \GuzzleHttp\Client();

$promise1 = $client->getAsync('http://loripsum.net/api')->then(
    function ($response) {
        return $response->getBody();
    }, function ($exception) {
        return $exception->getMessage();
    }
);

$promise2 = $client->getAsync('http://loripsum.net/api')->then(
    function ($response) {
        return $response->getBody();
    }, function ($exception) {
        return $exception->getMessage();
    }
);

$response1 = $promise1->wait();
$response2 = $promise2->wait();

echo $response1;
echo $response2


---------------------------------------------------
Promising a response
---------------------------------------------------
https://stephencoakley.com/2015/06/11/integrating-guzzle-6-asynchronous-requests-with-reactphp

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Psr\Http\Message\ResponseInterface;

$client = new Client();
$client->getAsync('http://loripsum.net/api')->then(
    function (ResponseInterface $res) {
        echo $res->getStatusCode() . "\n";
    }, function (RequestException $e) {
        echo $e->getMessage() . "\n";
        echo $e->getRequest()->getMethod();
    }
);




---------------------------------------------------
Loop
---------------------------------------------------
https://www.bountysource.com/issues/22228263-asynchronous-requests-with-requestasync-are-not-actually-sent-until-you-call-wait

use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Handler\CurlMultiHandler;
use function GuzzleHttp\Promise\queue as promiseQueue;

use Amp\Loop;
use Amp\Promise;
use Amp\Deferred;

Loop::run(function () {
    $queue = promiseQueue();
    Loop::repeat(0, [$queue, 'run']);

    /* Request 1 */
    Loop::defer(function() {
        $response = yield request("https://www.google.com/");
        var_dump($response->getBody());
    });

    /* Request 2 */
    Loop::defer(function() {
        $response = yield request("https://www.google.com/");
        var_dump($response->getBody());
    });

    /* Request 3 */
    Loop::defer(function() {
        $response = yield request("https://www.google.com/");
        var_dump($response->getBody());
    });

    /* Request 4 */
    Loop::defer(function() {
        $response = yield request("https://www.google.com/");
        var_dump($response->getBody());
    });
});


$guzzleClient = null;

function request($url, $method, $options) : Promise
{
    global $guzzleClient;

    $deferred = new Deferred;

    /* Create Client - Singleton */
    if (!$guzzleClient) {
        $defaultRequestHeaders = [];
        $defaultRequestHeaders['User-Agent'] = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36';

        $handler = new CurlMultiHandler();
        Loop::repeat(0, function() use ($handler) {
            $handler->tick();
        });
        $guzzleClient = new GuzzleClient([
            'headers' => $defaultRequestHeaders,
            'handler' => HandlerStack::create($handler),
            'connect_timeout' => 5,
            'read_timeout' => 5,
            'timeout' => 5
        ]);
    }

    /* Send Request */
    $guzzleClient
        ->requestAsync($method, $url, $options)
        ->then(function($response) use ($deferred) {
            $deferred->resolve($response);
        })
        ->otherwise(function($e) use ($deferred) {
            if ($e instanceof Throwable) {
                $deferred->fail($e);
            } else {
                $deferred->fail(new Exception($e));
            }
        });

    return $deferred->promise();
}





---------------------------------------------------
Guzzle uses Promises to handle async requests.
---------------------------------------------------
https://madewithlove.com/concurrent-http-requests/

$client = new GuzzleHttpClient();
$promise = $client->requestAsync('GET', 'https://api.github.com/users/hannesvdvreken');
$promise->then(function (ResponseInterface $response) {
    $profile = json_decode($response->getBody(), true);
    // Do something with the profile.
});
$promise->wait();


---------------------------------------------------
Guzzle make multiple requests at the same time
---------------------------------------------------
$promises = [];
foreach ($usernames as $username) {
    $promises[] = $client->requestAsync('GET', 'https://api.github.com/users/'.$username);
}
GuzzleHttpPromiseall($promises)->then(function (array $responses) {
    foreach ($responses as $response) {
         $profile = json_decode($response->getBody(), true);
         // Do something with the profile.
    }
})->wait();


---------------------------------------------------
protect ourselves from starting all requests at the same
---------------------------------------------------
$promises = (function () use ($username) {
    foreach ($usernames as $username) {
        yield $client->requestAsync('GET', 'https://api.github.com/users/'.$username);
    }
})();

new EachPromise($promises, [
    'concurrency' => 4,
    'fulfilled' => function (ResponseInterface $responses) {
         $profile = json_decode($response->getBody(), true);
         // Do something with the profile.
    },
])->promise()->wait();


---------------------------------------------------
responses could be cached to limit the total data sent over HTTP
---------------------------------------------------

/** @var PsrCacheCacheItemPoolInterface $cache */

$promises = (function () use ($username) use ($cache) {
    foreach ($usernames as $username) {
        if ($cache->hasItem($username)) {
            $value = $cache->getItem($username)->get();

            yield new GuzzleHttpPromiseFulfilledPromise($value);
            continue;
        }

        yield $client->requestAsync('GET', 'https://api.github.com/users/'.$username)
            ->then(function (ResponseInterface $response) use ($cache, $username) {
                $profile = json_decode($response->getBody(), true);
                $cache->save($cache->getItem($username)->set($profile));

                return $profile;
            });
    }
})();

new EachPromise($promises, [
    'concurrency' => 4,
    'fulfilled' => function (array $profile) {
         // Do something with the profile.
    },
])->promise()->wait();





//$queue = \GuzzleHttp\Promise\queue();
//$queue->run();

/*
 * https://documenter.getpostman.com/view/2132724/sample_rest/6fR57w5?version=latest
 * https://docs.99inbound.com/form-endpoints/json-api/
 * https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/GettingStarted/APIRequests/curl-formats.htm
 * https://old.wiki/index.php/Table_API_Curl_Examples
 * https://support.brightcove.com/concepts-set-curl
 * http://docs.php-http.org/en/latest/clients/socket-client.html
 * https://github.com/psrebniak/guzzle-socket-handler
 * http://docs.guzzlephp.org/en/5.3/
 * http://docs.guzzlephp.org/en/stable/faq.html
 * http://docs.guzzlephp.org/en/stable/
 * http://docs.guzzlephp.org/en/stable/index.html?highlight=loop
 * http://docs.guzzlephp.org/en/stable/quickstart.html?highlight=loop
 * http://docs.guzzlephp.org/en/stable/quickstart.html?highlight=pool
 *
 * curl --request GET google.com
 * curl -X POST -H 'Content-Type: application/json' -d '{"batch"}' 'https://api.example.com/v1/import' > /dev/null 2>&1 &
 * curl --location --request POST '127.0.0.1:3000/Category' --header 'Content-Type: application/json' --data-raw '{"Title": "Fantasy"}'
 * curl --location --request GET '127.0.0.1:3000/books/?category=Indian'
 *
 * curl --header "Content-Type: application/json" --header "Accept: application/json" --request POST --data '{"name":"Matthew","email":"matthew@example.com"}' https://app.99inbound.com/api/e/123456
 *
 * */





https://github.com/calevans
https://www.cloudways.com/blog/cal-evans-interview/
https://twitter.com/calevans
https://www.facebook.com/792916594079571/videos/cal-evans-rapid-fire-interview-for-bulgaria-php-conference/1052741174763777/
https://www.facebook.com/792916594079571/videos/2313800408698157/
https://www.youtube.com/watch?reload=9&v=EqaDQgDbZfM