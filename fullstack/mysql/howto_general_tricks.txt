
----------------------------------------------------------------------------
Disable the MySQL query cache without restarting MySQL
https://www.electrictoolbox.com/disable-mysql-query-cache-without-restarting/
https://www.percona.com/blog/2016/11/11/is-your-query-cache-really-disabled/
https://mariadb.com/kb/en/library/query-cache/
----------------------------------------------------------------------------

# Set cache 0
SET GLOBAL query_cache_size = 0;

# The query itself can also specify that it is not to be stored in the cache by using the SQL_NO_CACHE attribute.
SELECT SQL_NO_CACHE  * FROM table;

# Query Cache Fragmentation
FLUSH QUERY CACHE;


----------------------------------------------------------------------------
How To Use MySQL Query Profiling
https://www.digitalocean.com/community/tutorials/how-to-use-mysql-query-profiling
https://stackoverflow.com/questions/26141129/nodejs-mysql-measure-query-execution-time
https://stackoverflow.com/questions/11274892/measuring-actual-mysql-query-time
----------------------------------------------------------------------------

SET profiling = 1;
SHOW PROFILES;
SHOW PROFILE FOR QUERY 1;


EXPLAIN SELECT SQL_NO_CACHE * FROM table;

* * * *

Time a SQL on MySQL
Enable Profiling
mysql> SET PROFILING = 1
...
RUN your SQLs
...
mysql> SHOW PROFILES;

+----------+------------+-----------------------+
| Query_ID | Duration   | Query                 |
+----------+------------+-----------------------+
|        1 | 0.00014600 | SELECT DATABASE()     |
|        2 | 0.00024250 | select user from user |
+----------+------------+-----------------------+
mysql> SHOW PROFILE for QUERY 2;

+--------------------------------+----------+
| Status                         | Duration |
+--------------------------------+----------+
| starting                       | 0.000034 |
| checking query cache for query | 0.000033 |
| checking permissions           | 0.000006 |
| Opening tables                 | 0.000011 |
| init                           | 0.000013 |
| optimizing                     | 0.000004 |
| executing                      | 0.000011 |
| end                            | 0.000004 |
| query end                      | 0.000002 |
| freeing items                  | 0.000026 |
| logging slow query             | 0.000002 |
| cleaning up                    | 0.000003 |
+--------------------------------+----------+


13.7.3.1 ANALYZE TABLE Syntax
https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html
https://dev.mysql.com/doc/refman/8.0/en/join.html

ANALYZE TABLE t UPDATE HISTOGRAM ON c1, c2, c3 WITH 10 BUCKETS;
ANALYZE TABLE t UPDATE HISTOGRAM ON c1, c3 WITH 10 BUCKETS;
ANALYZE TABLE t DROP HISTOGRAM ON c2;







----------------------------------------------------------------------------
Why would someone use WHERE 1=1 AND <conditions> in a SQL clause?
https://stackoverflow.com/questions/8149142/where-1-1-statement
https://stackoverflow.com/questions/242822/why-would-someone-use-where-1-1-and-conditions-in-a-sql-clause
https://dba.stackexchange.com/questions/54954/why-use-where-1-or-where-1-1
https://www.tutorialspoint.com/mysql/mysql-where-clause.htm
https://www.bountysource.com/issues/48349313-sorting-not-working-in-server-side-datatables
----------------------------------------------------------------------------

select * from car_table where 1=1 --and value="TOYOTA" AND color="BLUE" --AND wheels=4
CREATE TABLE New_table_name as select * FROM Old_table_name WHERE 1 = 2;
CREATE VIEW vTest AS SELECT FROM Table WHERE 1=1  AND Table.Field=Value AND Table.IsValid=true
CREATE VIEW vTest AS SELECT FROM Table WHERE 1=1
MERGE INTO Circles USING ( SELECT pi FROM Constants ) AS SourceTable ON 1 = 1 WHEN MATCHED THEN UPDATE SET circumference = 2 * SourceTable.pi * radius;
CREATE VIEW vTest AS SELECT FROM Table WHERE 1=1 AND table.Field=Value







#################################################
#
# How to select in MySQL MariaDB with cache
#
#################################################

https://mariadb.com/kb/en/library/select/
https://mariadb.com/kb/en/library/query-cache/
https://mariadb.com/kb/en/library/sleep/
https://mariadb.com/kb/en/library/rand/
https://dev.mysql.com/doc/refman/8.0/en/select.html
https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html

SELECT
    [ALL | DISTINCT | DISTINCTROW]
    [HIGH_PRIORITY]
    [STRAIGHT_JOIN]
    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
    [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]

    [ FROM table_references
      [WHERE where_condition]
      [GROUP BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]]
      [HAVING where_condition]
      [ORDER BY {col_name | expr | position} [ASC | DESC], ...]
      [LIMIT {[offset,] row_count | row_count OFFSET offset}]


SELECT SLEEP(5.5);
SELECT * FROM my_table ORDER BY RAND() LIMIT 10;
SELECT BENCHMARK(1000000,ENCODE('hello','goodbye'));
SELECT ENCRYPT('encrypt me');


BENCHMARK
70 x 7000000







#################################################
#
# How to kill Process in MySQL MariaDB
#
#################################################

mysql -h localhost -u root -p
SHOW PROCESSLIST;
KILL QUERY ID;



#################################################
#
#   Select SUM from COUNT
#   https://www.w3resource.com/sql/aggregate-functions/sum-and-count-using-variable.php
#   https://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-sum().php
#
#################################################

SELECT SUM(mycount) FROM(SELECT COUNT( * ) AS mycount FROM customer);

SELECT ag.agent_code, ag.agent_name,cus.mycount,cus.mySUM FROM agents ag
INNER JOIN ( SELECT agent_code,COUNT(*) AS mycount, SUM(opening_amt) AS mySUM FROM Customer GROUP BY agent_code) cus ON cus.agent_code=ag.agent_code;


SELECT SUM(group_count) FROM
(
  SELECT
  COUNT(idPaciente) as group_count, Cobertura
  FROM paciente
  WHERE alta BETWEEN '2008-01-01' AND '2009-01-01'   GROUP BY Cobertura
)

SELECT SUM(paciente_count) FROM
(
	SELECT COUNT(paciente.idPaciente) as paciente_count, paciente.Cobertura
	FROM paciente
	WHERE paciente.alta BETWEEN '2008-01-01' AND '2009-01-01' GROUP BY paciente.Cobertura
) AS t1




####################################################
#
#   SQL_NO_CACHE + SQL_CACHE + HIGH_PRIORITY
#
#   https://dev.mysql.com/doc/refman/5.6/en/query-cache-in-select.html
#   https://www.petefreitag.com/item/613.cfm
#   https://mariadb.com/kb/en/library/query-cache/
#
####################################################

SELECT EXPLAIN SQL_NO_CACHE  * FROM table;
SELECT SQL_CACHE id, name FROM customer;
SELECT SQL_NO_CACHE id, name FROM customer;
SELECT /*!40001 SQL_NO_CACHE */ * FROM `watchdog`;
SELECT /*!40001 SQL_NO_CACHE */ * FROM `search_total` ORDER BY `word`;

SQL_NO_CACHE
SQL_CACHE # explicit mode (set query_cache_type = 2)
HIGH_PRIORITY # on SELECT or INSERT
LOW_PRIORITY # on INSERT and UPDATE
INSERT DELAYED
STRAIGHT_JOIN
SQL_BUFFER_RESULT
SQL_BIG_RESULT  # used with DISTINCT and GROUP BY SELECT
SQL_SMALL_RESULT






####################################################
#
#
#   STRAIGHT_JOIN
#
#   This is a simple example of how MySQL’s join optimizer can reorder queries to make them less expensive to execute.
#   Reordering joins is usually a very effective optimization. There are times when it won’t result in an optimal plan,
#   and for those times you can use STRAIGHT_JOIN and write the query in the order you think is best—but such times are
#   rare. In most cases, the join optimizer will outperform a human.
#
#   The join optimizer tries to produce a query execution plan tree with the lowest achievable cost.
#   When possible, it examines all potential combinations of subtrees, beginning with all one-table plans.
#
#   The join optimizer calculates the order in which tables should be joined. The table read order
#   forced by LEFT JOIN or STRAIGHT_JOIN helps the join optimizer do its work much more quickly,
#   because there are fewer table permutations to check. Note that this means that if you do a query
#   of the following type, MySQL does a full scan on b because the LEFT JOIN forces it to be read before
#
#
#   STRAIGHT_JOIN
#   STRAIGHT_JOIN applies to the JOIN queries, and tells the optimizer that the
#   tables must be read in the order they appear in the SELECT. For const and system
#   table this options is sometimes ignored.
#
####################################################


http://download.nust.na/pub6/mysql/doc/refman/5.1/de/select.html
http://ftp.nchu.edu.tw/MySQL/doc/refman/5.0/en/left-join-optimization.html
https://blog.programster.org/mysql-temprorary-tables
https://dev.mysql.com/doc/refman/5.5/en/innodb-performance-use_sys_malloc.html
https://dev.mysql.com/doc/refman/5.5/en/join.html
https://dev.mysql.com/doc/refman/5.5/en/select.html
https://dev.mysql.com/doc/refman/5.5/en/show-status.html
https://dev.mysql.com/doc/refman/5.5/en/using-explain.html
https://dev.mysql.com/doc/refman/5.7/en/select.html
https://dev.mysql.com/doc/refman/5.7/en/set-variable.html
https://dev.mysql.com/doc/refman/8.0/en/select.html
https://dev.mysql.com/doc/refman/8.0/en/show-processlist.html
https://dev.mysql.com/doc/refman/8.0/en/user-variables.html
https://docs.oracle.com/cd/E17952_01/mysql-5.0-en/left-join-optimization.html
https://mariadb.com/kb/en/library/index-hints-how-to-force-query-plans/
https://mariadb.com/kb/en/library/optimizer-hints/
https://quantum2.xyz/2018/11/04/optimize-mysql-mariadb-query-straight-join/
https://www.eversql.com/mysql-is-not-using-my-index-join-with-a-range-condition/
https://www.mysql.com/de/products/enterprise/high_availability.html
https://www.oreilly.com/library/view/high-performance-mysql/9780596101718/ch04.html
https://www.quora.com/What-are-pros-and-cons-of-PostgreSQL-and-MySQL-With-respect-to-reliability-speed-scalability-and-features


https://de.slideshare.net/ssuser74309b/mariadb-36867398
https://de.slideshare.net/Severalnines/webinar-slides-mysql-query-tuning-trilogy-working-with-optimizer-and-sql-tuning
https://www.slideshare.net/billkarwin/models-for-hierarchical-data
----------------------------------------------------------------------


#########################################################
#
# Select top domain by count
#
#########################################################

SELECT substring_index(url, '/', 3) AS urls ,count(*) AS total FROM `table` WHERE category_id = 26 GROUP BY urls ORDER BY total DESC


#########################################################
#
#   Mass Replace Conversion PNG into JPG
#
#########################################################

# dir unix
# for i in *.png; do convert $i "${i%.png}.jpg"; done

# DB
UPDATE table SET fieldname = REPLACE(fieldname,'.png','.jpg') WHERE `fieldname` LIKE '%.png' AND index=6


#########################################################
#
# Lowercase - Using PDO and assuming MySQL
#
#########################################################

$stmt = $db->prepare('SELECT * FROM table WHERE LOWER(`field`) = ?');
$stmt->execute(array(strtolower($var)));


#########################################################
#
#	How do you force mysql LIKE to be case sensitive
#
#########################################################

mysql> SELECT 'abc' LIKE 'ABC';
    -> 1
mysql> SELECT 'abc' LIKE BINARY 'ABC';
    -> 0

# SELECT * FROM table1 WHERE columnName like 'a%' COLLATE utf8_bin;

#########################################################
#
#   SELECT QUARTER
#
#########################################################

https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html
https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_quarter
SELECT QUARTER('2008-04-01');
        -> 2



#####################################################
#
# 	REPLACE mysql
# 	https://dev.mysql.com/doc/refman/5.7/en/replace.html
# 	https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace
#
#####################################################

# entry REPLACE
mysql> REPLACE INTO test VALUES (1, 'Old', '2014-08-20 18:47:00');
mysql> REPLACE INTO test VALUES (1, 'New', '2014-08-20 18:47:42');

# string REPLACE
mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');







-------------------------------------------------------------------------------------
############################################################

REPLACE

https://www.db-fiddle.com/
http://sqlfiddle.com/
https://dbfiddle.uk/

############################################################

https://dev.mysql.com/doc/refman/8.0/en/replace.html
https://dev.mysql.com/doc/refman/8.0/en/insert.html

CREATE TABLE test123 (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  data VARCHAR(64) DEFAULT NULL,
  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
);

INSERT INTO test123 VALUES (1, 'Old', '2014-08-20 18:47:00');
INSERT INTO test123 VALUES (2, 'Old', '2014-08-20 18:47:00');
INSERT INTO test123 VALUES (3, 'Old', '2014-08-20 18:47:00');
INSERT INTO test123 VALUES (4, 'Old', '2014-08-20 18:47:00');

REPLACE INTO test123 VALUES (1, 'Old', '2014-08-20 18:47:00');
REPLACE INTO test123 VALUES (1, 'New', '2014-08-20 18:47:42');

CREATE TABLE test123 (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  data VARCHAR(64) DEFAULT NULL,
  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id, ts)
);

REPLACE INTO test123 VALUES (1, 'Old', '2014-08-20 18:47:00');
REPLACE INTO test123 VALUES (1, 'New', '2014-08-20 18:47:42');
INSERT IGNORE INTO test123 VALUES (1, 'Con', '2014-08-20 18:47:00');
INSERT INTO test123 VALUES (1, 'Aby', '2014-08-20 18:47:42') ON DUPLICATE KEY UPDATE data='Abc';



