#####################################################
#Shell check if folder exists -----------------------
#####################################################

if [ ! -d /directory/to/check ]; then
    mkdir -p /directory/toc/check
fi

Check for directory exists

if [ -d "$DIRPATH" ]; then
    # Add code logic here
fi

Check for directory does not exist

if [ ! -d "$DIRPATH" ]; then
    # Add code logic here
fi

if [[ -d "${DIRECTORY}" && ! -L "${DIRECTORY}" ]] ; then
    echo "It's a bona-fide directory"
fi



#####################################################
# create environment variables
#####################################################
# https://scotch.io/tutorials/how-to-use-environment-variables

export DB_PASSWORD="abc"
echo $DB_PASSWORD


######################################
#
# BASH PERL VARS IN STRING
#
######################################

#!/bin/bash
cd "$(dirname "$0")"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"

LOCKFILE=123456789

if [ ! -f /tmp/fl_$LOCKFILE.lock ]; then
        echo "Lock file created: /tmp/fl_$LOCKFILE.lock"
        touch /tmp/fl_$LOCKFILE.lock

        perl -le 'print "Process started!";'
        perl read.pl --config='cfg_'$LOCKFILE'_nfo.ini'

        echo "Lock file deleted: /tmp/fl_$LOCKFILE.lock"
        rm /tmp/fl_$LOCKFILE.lock
else
        echo "Cannot create Lock file for $LOCKFILE"
fi

---------



################################################

https://stackoverflow.com/questions/638975/how-do-i-tell-if-a-regular-file-does-not-exist-in-bash
https://wiki.ubuntuusers.de/sleep/
https://www.cyberciti.biz/faq/linux-unix-sleep-bash-scripting/
http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-5.html

################################################

#!/bin/bash

sleep 5
sleep 5s
sleep 2m
sleep 0.1h
sleep 2h &&
sleep 30m && killall vlc
sleep 5d

if [ ! -f /tmp/foo.txt ]; then
    echo "File not found!"
else
	echo "File found!"
fi



#!/bin/bash
FILE=$1

if [ ! -f "$FILE" ]
then
    echo "File $FILE does not exist"
fi


if [[ ! -f $FILE ]]; then
    if [[ -L $FILE ]]; then
        printf '%s is a broken symlink!\n' "$FILE"
    else
        printf '%s does not exist!\n' "$FILE"
    fi
fi



Bash File Testing

-b filename - Block special file
-c filename - Special character file
-d directoryname - Check for directory Existence
-e filename - Check for file existence, regardless of type (node, directory, socket, etc.)
-f filename - Check for regular file existence not a directory
-G filename - Check if file exists and is owned by effective group ID
-G filename set-group-id - True if file exists and is set-group-id
-k filename - Sticky bit
-L filename - Symbolic link
-O filename - True if file exists and is owned by the effective user id
-r filename - Check if file is a readable
-S filename - Check if file is socket
-s filename - Check if file is nonzero size
-u filename - Check if file set-user-id bit is set
-w filename - Check if file is writable
-x filename - Check if file is executable

-e: Returns true if file exists (regular file, directory, or symlink)
-f: Returns true if file exists and is a regular file
-d: Returns true if file exists and is a directory
-h: Returns true if file exists and is a symlink

-r: Returns true if file exists and is readable
-w: Returns true if file exists and is writable
-x: Returns true if file exists and is executable
-s: Returns true if file exists and has a size > 0


################################################

bash read input yes no

################################################

https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script
https://www.computerhope.com/unix/bash/read.htm
https://www.shellhacks.com/yes-no-bash-script-prompt-confirmation/
https://tecadmin.net/bash-script-prompt-to-confirm-yes-no/
https://unix.stackexchange.com/questions/285362/how-to-execute-yes-no-operation-as-long-as-i-press-yes-in-bash
https://gist.github.com/davejamesmiller/1965569
https://danielgibbs.co.uk/2013/06/bash-yesno/
https://askubuntu.com/questions/338857/automatically-enter-input-in-command-line


while true; do
    read -p "Do you wish to install this program?" yn
    case $yn in
        [Yy]* ) make install; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
done

echo "Do you wish to install this program?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) make install; break;;
        No ) exit;;
    esac
done

read -p "Are you sure? " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi




http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html
https://unix.stackexchange.com/questions/152372/how-to-make-bash-script-ask-you-if-you-want-to-execute-the-next-segmentpart
https://unix.stackexchange.com/questions/232761/get-script-to-run-again-if-input-is-yes
https://askubuntu.com/questions/1038276/how-to-get-bash-file-to-echo-differently-based-on-user-input
https://tecadmin.net/prompt-user-input-in-linux-shell-script/
https://en.wikibooks.org/wiki/Bash_Shell_Scripting
https://itnext.io/bash-scripting-everything-you-need-to-know-about-bash-shell-programming-cd08595f2fba
https://stackoverflow.com/questions/2953646/how-can-i-declare-and-use-boolean-variables-in-a-shell-script

echo -n "Enter your name and press [ENTER]: "
read name
echo -n "Enter your gender and press [ENTER]: "
read -n 1 gender
echo


echo "Do you want to continue?(yes/no)"
read -s input
if [ "$input" == "yes" ]
then
echo "continue"
fi



#!/bin/bash
read -p "Enter Your Name: "  username
echo "Welcome $username!"

if [[ "$1" == --verbose ]] ; then
  verbose_mode=TRUE
  shift # remove the option from $@
else
  verbose_mode=FALSE
fi
