
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Regex PERL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
über mehrere Zeilen (m)
einzelne Zeile (s)
Groß-/Kleinschreibung ignorieren (i)
Erweitert mit Leerzeichen und Kommentaren (x)
übereinstimmenden Strings behalten (p)
Muster überall finden (g)
Die aktuelle Position merken (c)
Verwende ASCII-Zeichensatz Regeln (a)
Verwende Standard-Zeichensatz Regeln (d)
Verwende locale charset Regeln (l)
Verwende Unicode-Zeichensatz Regeln (u)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PERL comparison
https://alvinalexander.com/blog/post/perl/perl-if-else-elsif-syntax-example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                           Numeric Test      String Test
Equal                           ==                eq
Not equal                       !=                ne
Less than                       <                 lt
Greater than                    >                 gt
Less than or equal to           <=                le
Greater than or equal to        >=                ge


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PERL REGEX
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

https://stackoverflow.com/questions/24665994/using-grep-linux-command-with-perl-regex-capturing-groups
echo 'foosomething' | grep -Po '\w+\Ksomething'
echo 'foosomething' | grep -Po '(?<=\w+)something'
echo 'foosomethingbar' | grep -Po 'foo\K.*?(?=bar)'
echo 'foosomethingbar' | grep -Po '(?<=foo).*?(?=bar)'
perl -lwe 'print $ENV{var} =~ /a(\d+)/;'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PERL Backticks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://metacpan.org/pod/perlop#Backticks
https://stackoverflow.com/questions/4443659/calling-command-from-perl-need-to-see-output

Backticks, or the qx command, run a command in a separate process and returns the output:

print `$command`;
print qx($command);

print << `EOC`; # execute command and get results
echo hi there
EOC



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Perl -X operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://perlmaven.com/file-test-operators
Description taken from the official documentation of Perl:

-r File is readable by effective uid/gid.
-w File is writable by effective uid/gid.
-x File is executable by effective uid/gid.
-o File is owned by effective uid.

-R File is readable by real uid/gid.
-W File is writable by real uid/gid.
-X File is executable by real uid/gid.
-O File is owned by real uid.

-e File exists.
-z File has zero size (is empty).
-s File has nonzero size (returns size in bytes).

-f File is a plain file.
-d File is a directory.
-l File is a symbolic link (false if symlinks aren't supported by the file system).
-p File is a named pipe (FIFO), or Filehandle is a pipe.
-S File is a socket.
-b File is a block special file.
-c File is a character special file.
-t Filehandle is opened to a tty.

-u File has setuid bit set.
-g File has setgid bit set.
-k File has sticky bit set.

-T File is an ASCII or UTF-8 text file (heuristic guess).
-B File is a "binary" file (opposite of -T).

-M Script start time minus file modification time, in days.
-A Same for access time.
-C Same for inode change time (Unix, may differ for other platforms)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GREP find perl dependencies
https://www.geeksforgeeks.org/grep-command-in-unixlinux/
https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Options Description

-c : This prints only a count of the lines that match a pattern
-h : Display the matched lines, but do not display the filenames.
-i : Ignores, case for matching
-l : Displays list of a filenames only.
-n : Display the matched lines and their line numbers.
-v : This prints out all the lines that do not matches the pattern
-e exp : Specifies expression with this option. Can use multiple times.
-f file : Takes patterns from file, one per line.
-E : Treats pattern as an extended regular expression (ERE)
-w : Match whole word
-o : Print only the matched parts of a matching line,
 with each such part on a separate output line.



-i	Ignore case distinctions on Linux and Unix
-w	Force PATTERN to match only whole words
-v	Select non-matching lines
-n	Print line number with output lines
-h	Suppress the Unix file name prefix on output
-r	Search directories recursivly on Linux
-R	Just like -r but follow all symlinks
-l	Print only names of FILEs with selected lines
-c	Print only a count of selected lines per FILE
--color	Display matched pattern in colors


grep -rh ^use --include="*.pl" --include="*.pm" . | sort | uniq -c
grep -rh ^require ^include --include="*.php" . | sort | uniq -c
grep -rh ^from ^import --include="*.py" . | sort | uniq -c


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PERL getpwuid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://perldoc.perl.org/5.8.9/functions/getpwuid.html


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PERL umask
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http://perldoc.perl.org/functions/umask.html
http://php.net/manual/de/function.umask.php



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What is $@ in Perl?
https://stackoverflow.com/questions/16293809/what-is-in-perl
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# PERL ---------------------------------------
for $i(@myarr)
{
    #some stuff
    eval {
        #some stuff
    };
    if($@)
    {
        print "*** $@ ****";
    }
}


# PHP ---------------------------------------
for ($i=0; $i<$myarr;$i++)
{
    #some stuff
    try {
        #some stuff
    }
    catch(Exception $e)
    {
        print "*** $e->getMessage()****";
    }
}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SFTP connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#!/usr/bin/perl
use Net::SFTP;

sub ftp_send() {
    my($file) = @_;
    $sftp = Net::SFTP->new('xxx', user=>'zzz', password=>'yyy', debug=>1);
    $sftp->put("$homedir", "$remote");
    #close the SFTP connection here exit SFTP environment
}

if ($sth->rows > 0)
{
    while($href = $sth->fetchrow_hashref()) {
    $optCount++;
    &build_file($href);
    }

    $filename = 'test.txt';
    open(out, ">>/home/$filename") || die("Couldn't open data file $!\n");
    print out $table;
    close(out);
    &ftp_send($filename);

}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AI::FANN perl neuronal network
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://github.com/gitpan/AI-LibNeural
https://metacpan.org/pod/AI::FANN

# train
use AI::FANN qw(:all);
# create an ANN with 2 inputs, a hidden layer with 3 neurons and an
# output layer with 1 neuron:
my $ann = AI::FANN->new_standard(2, 3, 1);
$ann->hidden_activation_function(FANN_SIGMOID_SYMMETRIC);
$ann->output_activation_function(FANN_SIGMOID_SYMMETRIC);
# create the training data for a XOR operator:
my $xor_train = AI::FANN::TrainData->new( [-1, -1], [-1],
                                          [-1, 1], [1],
                                          [1, -1], [1],
                                          [1, 1], [-1] );

$ann->train_on_data($xor_train, 500000, 1000, 0.001);
$ann->save("xor.ann");


# validate
use AI::FANN;
my $ann = AI::FANN->new_from_file("xor.ann");
for my $a (-1, 1) {
  for my $b (-1, 1) {
    my $out = $ann->run([$a, $b]);
    printf "xor(%f, %f) = %f\n", $a, $b, $out->[0];
  }
}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
perl comments block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://perldoc.perl.org/functions/chomp.html
https://www.perlmonks.org/?node_id=135462
https://perlmaven.com/shift
https://perldoc.perl.org/functions/shift.html
https://learn.perl.org/faq/perlfaq7.html
https://learn.perl.org/faq/perlfaq7.html
https://www.perlmonks.org/?node_id=7563
http://theory.uwinnipeg.ca/CPAN/perl/pod/perlfaq7/How_can_I_comment_out_a_large_block_of_p.html
https://stackoverflow.com/questions/3828205/how-do-i-enter-a-multi-line-comment-in-perl

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
perl shift - shift elements to left
php array_shift - equivalent
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.thoughtco.com/perl-array-shift-function-quick-tutorial-2641153
https://perlmaven.com/manipulating-perl-arrays
https://perldoc.perl.org/functions/shift.html
http://www.hidemail.de/blog/shift-perl.shtml
https://www.geeksforgeeks.org/perl-arrays-push-pop-shift-unshift/
https://www.php.net/manual/en/function.array-shift.php




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Perl Comparison operators for numbers and strings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.perlmonks.org/?node_id=2637
http://www-cgi.cs.cmu.edu/afs/cs/user/rgs/mosaic/pl-exp-op.html
http://perlmeme.org/howtos/syntax/comparing_values.html
https://users.cs.cf.ac.uk/Dave.Marshall/PERL/node37.html
https://stackoverflow.com/questions/1175390/how-do-i-compare-two-strings-in-perl

# Perl has different operators (relational and equality operators)for comparing numbers and strings. They are defined as follows:
Equality                	Numeric	String
Equal	==	eq
Not Equal	!=	ne
Comparison	<=>	cmp
Relational                	Numeric	String
Less than	<	lt
Greater than	>	gt
Less than or equal	<=	le
Greater than or equal	>=	ge


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Perl online tester
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.tutorialspoint.com/execute_perl_online.php
https://www.tutorialspoint.com/online_perl_formatter.htm
https://www.tutorialspoint.com/execute_perl_online.php
http://www.compileonline.com/execute_perl_online.php
https://www.jdoodle.com/execute-perl-online
http://rextester.com/l/perl_online_compiler
https://paiza.io/en/projects/new?language=perl
https://www.onlinegdb.com/online_perl_compiler

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Perl misc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

https://www.developpez.net/forums/d1919673/autres-langages/perl/langage/use-of-uninitialized-value-_-in-pattern-match-m/
http://www.perl-community.de/bat/poard/thread/11074
http://www.hidemail.de/blog/chomp-perl.shtml
https://perldoc.perl.org/functions/chomp.html
https://www.perl-community.de/bat/poard/thread/15046

https://fido7.ru.unix.bsd.narkive.com/Lij0iN72/2
https://www.cs.colostate.edu/~cs155/Spring18/Lecture/Commands4
https://metacpan.org/release/IO-KQueue
https://metacpan.org/source/MSERGEANT/IO-KQueue-0.34/examples/tail.pl
https://metacpan.org/pod/IO::KQueue
https://opensource.apple.com/source/CPANInternal/CPANInternal-159.1/IO-KQueue-0.34/KQueue.pm






