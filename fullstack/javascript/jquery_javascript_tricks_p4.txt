
######################################################
#
#   setTimeout alternatives - await promises
#
######################################################

/*
https://www.sitepoint.com/jquery-settimeout-function-examples/
https://medium.com/javascript-in-plain-english/truly-understanding-promises-in-javascript-cb31ee487860
https://medium.com/javascript-in-plain-english/async-await-javascript-5038668ec6eb
https://hackernoon.com/smarter-javascript-timeouts-24308f3be5ab
https://javascript.info/settimeout-setinterval
https://blog.praveen.science/right-way-of-delaying-execution-synchronously-in-javascript-without-using-loops-or-timeouts/
https://developer.mozilla.org/de/docs/Web/API/WindowTimers/setTimeout
http://jsfiddle.net/wZ9Z6/
https://stackoverflow.com/questions/35133311/js-settimeout-alternative
https://rpo.wrotapodlasia.pl/docs/sections/custom/scrollbar.html
https://stackoverflow.com/questions/36209758/how-to-reset-the-scroller-on-ace-theme
http://jsfiddle.net/wna8h21d/1/
http://jsfiddle.net/wna8h21d/

chrome://flags/#overlay-scrollbars
*/

// using Timeout lib
// https://github.com/rommelsantor/Timeout
const didGreet = Timeout.set('myGreeting', greetWorld, 2000)
if (Timeout.exists('myGreeting')) {// true
  console.log('greeting has been scheduled')
}


// Classic setTimeout
// ----------------------------
// repeat with the interval of 2 seconds
let timerId = setInterval(() => alert('tick'), 2000);
// after 5 seconds stop
setTimeout(() => { clearInterval(timerId); alert('stop'); }, 5000);


// Garbage collection and setInterval/setTimeout callback
// ----------------------------
// the function stays in memory until the scheduler calls it
setTimeout(function() {...}, 100);


// Using await async
// ----------------------------
async done(){ return true }
console.log("Start");
console.time("Promise");
await new Promise(done => setTimeout(() => done(), 5000));
console.log("End");
console.timeEnd("Promise");


// Using delay
// ----------------------------
function delay(n) {
  n = n || 2000;
  return new Promise(done => {
    setTimeout(() => {
      done();
    }, n);
  });
}


// Using jQuery
// ----------------------------
// Creates a jQ object where elem set to index of [0]
// a plain object with value of 0 `{to:0}`
// call .animate() chained to the jQ object
// Animates `{to:0}` value from 0 - 1
// $({to:0}).animate({to:1}

var duration = 5000;
$({to:0}).animate({to:1}, duration, function() {
  // do stuff after `duration` elapsed
  $("#messageTimer").html("Happy New Year ! (working version)")
})


// Using simple await
// ----------------------------
// async wait
async function firstAsync() {
  return 27;
}
firstAsync().then(alert); // 27



//  Async Await together
// ----------------------------
// To make the above function work properly, we need to add async before
async function firstAsync() {
    let promise = new Promise((res, rej) => {
        setTimeout(() => res("Now it's done!"), 1000)
    });
    // wait until the promise returns us a value
    let result = await promise;
    // "Now it's done!"
    alert(result);
};
firstAsync();


//  takes 100ms to complete
// ----------------------------
async function sequence() {
  await promise1(50); // Wait 50ms…
  await promise2(50); // …then wait another 50ms.
  return "done!";
}


// Seq
// ----------------------------
async function sequence() {
    await Promise.all([promise1(), promise2()]);
    return "done!";
}


// Parallel
// ----------------------------
async function parallel() {    // Start a 500ms timer asynchronously…
    const wait1 = promise1(50);     // …meaning this timer happens in parallel.
    const wait2 = promise2(50);
    // Wait 50ms for the first timer…
    await wait1;
    // by which time this timer has already finished.
    await wait2;
    return "done!";
}



// Chaining Promises
// ----------------------------
new Promise(function(resolve, reject) {
  setTimeout(() => resolve(1), 1000);
}).then(function(result) {
  alert(result);
  return result * 3;
}).then(function(result) {
  alert(result);
  return result * 4;
}).then(function(result) {
  alert(result);
  return result * 6;

});



//  Handling and Consuming the Promis
// ----------------------------
const isDone = new Promise()
//...
const checkIfDone = () => {
  isDone
    .then(ok => {
      console.log(ok)
    })
    .catch(err => {
      console.error(error)
    })
}




###################################################
#
#	sidebar ? re-init
#
###################################################

https://splashtours.ae/docs/sections/changes/
https://github.com/bf914/ACE/blob/master/assets/js/ace/ace.settings.js
https://github.com/bf914/ACE/tree/master/assets/js/ace
http://www.codeforge.com/read/313626/ace.sidebar.js__html
http://rpo.wrotapodlasia.pl/docs/sections/settings/index.html
http://acquacleanpiscinas.com.br/public/docs/#basics/sidebar
https://github.com/bopoda/ace
http://ace.jeka.by/
https://getbootstrap.com/docs/3.4/javascript/
http://ace.jeka.by/
https://github.com/hrmSms/hrm/blob/master/src/main/webapp/shared/ace-settings-box.html
https://splashtours.ae/docs/sections/settings/
https://github.com/bopoda/ace/blob/master/top-menu.html
https://github.com/neilgao000/pro-admin/blob/master/assets/js/ace/ace.sidebar.js
https://github.com/bf914/ACE/blob/a44417867ffda45e5814edf022ba0e9c21df282f/assets/js/ace/ace.settings.js
https://github.com/bf914/ACE/blob/a44417867ffda45e5814edf022ba0e9c21df282f/assets/js/ace-extra.js
http://acquacleanpiscinas.com.br/public/docs/#basics/sidebar
http://www.codeforge.com/read/302488/ace.submenu-hover.js__html
http://www.bvbcode.com/code/4rst8ieb-2071114
https://github.com/neilgao000/pro-admin/blob/master/assets/js/ace/ace.sidebar.js
https://github.com/bf914/ACE/blob/a44417867ffda45e5814edf022ba0e9c21df282f/assets/js/ace-extra.js
https://github.com/bf914/ACE/blob/a44417867ffda45e5814edf022ba0e9c21df282f/assets/js/ace/ace.settings.js
https://github.com/bf914/ACE/blob/a44417867ffda45e5814edf022ba0e9c21df282f/mustache/app/views/assets/scripts/index.js


$('#sidebar').addClass('collpase navbar-collapse');

let $sidebar = $('.sidebar');
if($.fn.ace_sidebar) $sidebar.ace_sidebar();
$sidebar.ace_sidebar_hover({
	'sub_hover_delay': 750,
	'sub_scroll_style': 'no-track scroll-thin scroll-margin scroll-visible'
});

ace.settings.loadState('sidebar', 'minimized')
ace.helper.getAttrSettings('.sidebar',{ /**/ minimized:true });
try { ace.settings.check('sidebar', 'fixed') } catch (e) { }

$('#sidebar').ace_sidebar({ /**/sidebar_collapsed:true});
$('#sidebar').ace_sidebar();
$('#sidebar').ace_sidebar_hover({ /* */ sub_hover_delay: 750});
$('#sidebar').ace_scroll({ /* */ size: 850});


###################################################
#
#	Clone Dom jQuery 2.2.4 / 3.2.1 - Test https://jsfiddle.net/
#
###################################################

<div class="js-source">   aaaa </div>
<div class="js-destination">   ? </div>
<div class="js2-source">   bbb </div>
<div class="js2-destination">   ???? </div>
<button type="button" id="doClone">clone</button>

<!--
https://api.jquery.com/clone/
https://api.jquery.com/empty/
https://css-tricks.com/snippets/javascript/random-hex-color/
https://forum.jquery.com/topic/cloned-dom-objects-losing-event-listeners-after-replacewith
https://pawelgrzybek.com/cloning-dom-nodes-and-handling-attached-events/
http://jsfiddle.net/1o8jk4pf/2/
https://mkyong.com/jquery/jquery-clone-example/
https://www.geeksforgeeks.org/jquery-clone-with-examples/
https://github.com/jquery/jquery/issues/1973
-->

<script>
	// using cloneNode()
	/*const sourceElement = document.querySelector('.js-source');
	const destination = document.querySelector('.js-destination');
	const copy = sourceElement.cloneNode(true);
	destination.appendChild(copy);*/

	// using importNode()
	const sourceElement = document.querySelector('.js-source');
	const destination = document.querySelector('.js-destination');
	const copy = document.importNode(sourceElement, true);
	destination.appendChild(copy);

	$(function($){
		let sourceElement = $('.js2-source').clone(true,true);
		let destination = $('.js2-destination');
		$('.js2-source').click(function(){
	  	var randomColor = Math.floor(Math.random()*16777215).toString(16);
	  		$(this).css("color","#" + randomColor);
	  });
	  $('#doClone').click(function(){
			//destination.html(sourceElement);
		sourceElement = $('.js2-source').clone(true,true);
		//sourceElement.data('clickEvent',sourceElement.onclick);
			sourceElement.data('clickEvent',this.onclick);
	  	destination.prepend(sourceElement);
	  });
	  //destination.html(sourceElement)
	  //destination.prepend(sourceElement)
	});
</script>

