
######################################################
#
#   setTimeout alternatives - await promises
#
######################################################

/*
https://www.sitepoint.com/jquery-settimeout-function-examples/
https://medium.com/javascript-in-plain-english/truly-understanding-promises-in-javascript-cb31ee487860
https://medium.com/javascript-in-plain-english/async-await-javascript-5038668ec6eb
https://hackernoon.com/smarter-javascript-timeouts-24308f3be5ab
https://javascript.info/settimeout-setinterval
https://blog.praveen.science/right-way-of-delaying-execution-synchronously-in-javascript-without-using-loops-or-timeouts/
https://developer.mozilla.org/de/docs/Web/API/WindowTimers/setTimeout
http://jsfiddle.net/wZ9Z6/
https://stackoverflow.com/questions/35133311/js-settimeout-alternative
https://rpo.wrotapodlasia.pl/docs/sections/custom/scrollbar.html
https://stackoverflow.com/questions/36209758/how-to-reset-the-scroller-on-ace-theme
http://jsfiddle.net/wna8h21d/1/
http://jsfiddle.net/wna8h21d/

chrome://flags/#overlay-scrollbars
*/

// using Timeout lib
// https://github.com/rommelsantor/Timeout
const didGreet = Timeout.set('myGreeting', greetWorld, 2000)
if (Timeout.exists('myGreeting')) {// true
  console.log('greeting has been scheduled')
}


// Classic setTimeout
// ----------------------------
// repeat with the interval of 2 seconds
let timerId = setInterval(() => alert('tick'), 2000);
// after 5 seconds stop
setTimeout(() => { clearInterval(timerId); alert('stop'); }, 5000);


// Garbage collection and setInterval/setTimeout callback
// ----------------------------
// the function stays in memory until the scheduler calls it
setTimeout(function() {...}, 100);


// Using await async
// ----------------------------
async done(){ return true }
console.log("Start");
console.time("Promise");
await new Promise(done => setTimeout(() => done(), 5000));
console.log("End");
console.timeEnd("Promise");


// Using delay
// ----------------------------
function delay(n) {
  n = n || 2000;
  return new Promise(done => {
    setTimeout(() => {
      done();
    }, n);
  });
}


// Using jQuery
// ----------------------------
// Creates a jQ object where elem set to index of [0]
// a plain object with value of 0 `{to:0}`
// call .animate() chained to the jQ object
// Animates `{to:0}` value from 0 - 1
// $({to:0}).animate({to:1}

var duration = 5000;
$({to:0}).animate({to:1}, duration, function() {
  // do stuff after `duration` elapsed
  $("#messageTimer").html("Happy New Year ! (working version)")
})


// Using simple await
// ----------------------------
// async wait
async function firstAsync() {
  return 27;
}
firstAsync().then(alert); // 27



//  Async Await together
// ----------------------------
// To make the above function work properly, we need to add async before
async function firstAsync() {
    let promise = new Promise((res, rej) => {
        setTimeout(() => res("Now it's done!"), 1000)
    });
    // wait until the promise returns us a value
    let result = await promise;
    // "Now it's done!"
    alert(result);
};
firstAsync();


//  takes 100ms to complete
// ----------------------------
async function sequence() {
  await promise1(50); // Wait 50ms…
  await promise2(50); // …then wait another 50ms.
  return "done!";
}


// Seq
// ----------------------------
async function sequence() {
    await Promise.all([promise1(), promise2()]);
    return "done!";
}


// Parallel
// ----------------------------
async function parallel() {    // Start a 500ms timer asynchronously…
    const wait1 = promise1(50);     // …meaning this timer happens in parallel.
    const wait2 = promise2(50);
    // Wait 50ms for the first timer…
    await wait1;
    // by which time this timer has already finished.
    await wait2;
    return "done!";
}



// Chaining Promises
// ----------------------------
new Promise(function(resolve, reject) {
  setTimeout(() => resolve(1), 1000);
}).then(function(result) {
  alert(result);
  return result * 3;
}).then(function(result) {
  alert(result);
  return result * 4;
}).then(function(result) {
  alert(result);
  return result * 6;

});



//  Handling and Consuming the Promis
// ----------------------------
const isDone = new Promise()
//...
const checkIfDone = () => {
  isDone
    .then(ok => {
      console.log(ok)
    })
    .catch(err => {
      console.error(error)
    })
}