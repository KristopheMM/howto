##############################################################
#
# Extract plate von video - todo
#
##############################################################

Steps

download video -> youtube-dl
convert 2 png -> ffmpeg - resize
detect car in png -> yolo3 tf
detect plate in car pngs -> openalpr
export list

------------------------------------------------------------------------------

https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/#0
https://www.tensorflow.org/hub/tutorials/image_retraining
https://www.tensorflow.org/tutorials/images/image_recognition#usage_with_python_api
https://github.com/tensorflow
https://pypi.org/project/yolo34py/
https://mc.ai/yolo3-a-huge-improvement/
https://pjreddie.com/darknet/yolo/
https://github.com/openalpr/openalpr
https://github.com/tensorflow/models/blob/master/tutorials/image/imagenet/classify_image.py
https://github.com/tensorflow/models/blob/master/research/nst_blogpost/4_Neural_Style_Transfer_with_Eager_Execution.ipynb
https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/contrib/eager/python/examples/pix2pix/pix2pix_eager.ipynb

------------------------------------------------------------------------------

https://www.youtube.com/watch?v=QfNvhPx5Px8
https://gist.github.com/jkjung-avt/790a1410b91c170187f8dbdb8cc698c8

https://www.networkcameracritic.com/?p=2177
https://www.computerhope.com/unix/ufgrep.htm
https://medium.com/@ryanfb/how-i-failed-to-replicate-an-86-million-project-in-1-line-of-code-615048a1f9d0
https://medium.freecodecamp.org/how-i-replicated-an-86-million-project-in-57-lines-of-code-277031330ee9
https://www.youtube.com/watch?v=hrD75ebjCms

sudo apt-get update && sudo apt-get install -y openalpr openalpr-daemon openalpr-utils libopenalpr-dev

time alpr -c eu sample.jpg
time alpr -r "/usr/share/..../openalpr/runtime_data” sample.jpg
time alpr --clock -n 1 'Drive around Bendigo-hrD75ebjCms.mp4' > bendigo.txt
fgrep confidence bendigo.txt| cut -d' ' -f 6 | sort -u | shuf | head
fgrep 'confidence: 9' bendigo.txt | cut -d' ' -f 6 | sort -u

------------------------------------------------------------------------------

https://github.com/openalpr/openalpr/wiki/Pattern-Matching
http://doc.openalpr.com/accuracy_improvements.html
http://doc.openalpr.com/on_premises.html
https://github.com/openalpr/train-ocr
http://doc.openalpr.com/opensource.html
https://github.com/openalpr/openalpr
https://github.com/anuj-badhwar/Indian-Number-Plate-Recognition-System

------------------------------------------------------------------------------

##############################################################################
#
#
#
##############################################################################

# --------------------------
# Slow Installation
# --------------------------

# git clone https://github.com/anuj-badhwar/Indian-Number-Plate-Recognition-System.git
git clone https://github.com/openalpr/openalpr

alpr --help
alpr ../render/frame1.jpg > result.txt

sudo apt-get install tesseract-ocr
tesseract --list-langs

wget https://tesseract-ocr.googlecode.com/files/eng.traineddata.gz
wget https://github.com/tesseract-ocr/tessdata/raw/master/eng.traineddata
gunzip eng.traineddata.gz

ll /usr/share/openalpr/runtime_data/config/
ll /usr/share/openalpr/runtime_data/ocr/lus.traineddata
ll /usr/share/openalpr/runtime_data/ocr/lus.traineddata
sudo cp /usr/share/openalpr/runtime_data/ocr/tessdata/* /usr/share/openalpr/runtime_data/ocr/




=================================================
# Usage with Python API Tensorflow
=================================================

# Install Dependency Packages

sudo apt install python3-pip -y
pip3 install tensorflow
pip3 install numpy
pip3 install pandas


git clone https://github.com/tensorflow/models

cd models/tutorials/image/imagenet
python classify_image.py
python classify_image.py --image_file your_file_here
python3 classify_image.py --image_file your_file_here

If you wish to supply other JPEG images, you may do so by editing the --image_file argument.
If you download the model data to a different directory, you will need to point --model_dir to the directory used.

=================================================
# YOLO detect images
=================================================
Installing The Base System (  OpenCV CUDA )

git clone https://github.com/pjreddie/darknet.git
cd darknet
make

# mkdir -p obj
# mkdir -p resutls
# ./darknet
# usage: ./darknet <function>

wget https://pjreddie.com/media/files/yolov3.weights #
wget https://pjreddie.com/media/files/yolo.weights #
wget https://pjreddie.com/media/files/yolov2.weights #
wget https://pjreddie.com/media/files/yolo-tiny.weights #

Detection Using A Pre-Trained Model

./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg
./darknet detector test cfg/coco.data cfg/yolov3.cfg yolov3.weights data/dog.jpg

Multiple Images & Changing The Detection Threshold

./darknet detect cfg/yolov3.cfg yolov3.weights
./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg -thresh 0

Example
./darknet detect cfg/yolov3.cfg yolov3.weights  ~/Downloads/baby1.jpg -out baby1_prediction.jpg








# --------------------------
# Quick Installation
# --------------------------

sudo apt-get update && sudo apt-get install -y openalpr openalpr-daemon openalpr-utils libopenalpr-dev
sudo apt install ffmpeg -y
sudo apt install git -y
sudo apt install youtube-dl -y
sudo apt install openalpr -y

# -----------------------------------------
# FLOW
# -----------------------------------------

#!/bin/bash

# check video formats
youtube-dl -F jQU_wiBW6M0

# download video
youtube-dl --format 135 jQU_wiBW6M0

# convert video 2 PNG images - extract every 5 frame
ffmpeg -i jQU_wiBW6M0.mp4 -s 480x270 -preset ultrafast -vf "select=not(mod(n\,5))" -vsync vfr -q:v 2  render/frame_%03d.png
ffmpeg -i jQU_wiBW6M0.mp4 -preset ultrafast -vf "select=not(mod(n\,10))" -vsync vfr -q:v 2 render/frame_%03d.png

# search in video directly
time alpr --clock -n 20 -c eu -p ro jQU_wiBW6M0.mp4  > output.txt

# resize evntually
find ../ -name "*.jpg" | xargs mogrify -resize 50%
for i in render/*.png; do convert -resize 50% $i $i.jpg; done

# count total number of PNG files
find render/ -name  *.png | wc -l

#  find images with cars ( using yolo3 and tensorflow) - with yolo3 takes 26sec, with tensorflow 2sec
cd ~/Downloads/models/tutorials/image/imagenet
for i in  ~/Downloads/render/*.png; do python3 classify_image.py --image_file $i  > $i.txt; done

# find car string in tf txt files
grep ' car ' render/*.txt

# detect plate
for i in render/*.jpg; do alpr -c eu -p ro -n 20  $i >> result.txt; done

# see results
tail -n 200 result.txt | grep 'pattern_match: 1'
cat result.txt | grep 'pattern_match: 1'

# show file in results
tail -n 200 result.txt | grep -H  'pattern_match: 1'

# save positive result
cat result.txt | grep 'pattern_match: 1' > result2.txt

# backup
zip -r render.zip render/

---------------------------------
// --------------------------------------------------------------
// Get the number of frames in a video on the linux command line?
// --------------------------------------------------------------

sudo apt install mediainfo
mediainfo --fullscan inputfile | grep "Frame count" works nicely for most files.

ffprobe -select_streams v -show_frames -count_frames INPUT_FILE | grep 'pkt_duration_time'

---------------------------------
########################################
#
#   Sort Results with PHP
#
########################################

<?php

// http://phptester.net/
// https://regex101.com/
// https://regexr.com/
// https://www.regextester.com/

// http://www.itlearning.ro/forum/viewtopic.php?t=5130
// https://gitlab.dcae.pub.ro/Teaching/exemple_consultatii_eccpr/commit/cedcc69d415aa204ade9092e93853c2ea0295c6c

$arr = array(
'PH08GYL', 'H08GYL', 'FH08GYL', 'PH08GVL', 'PH08BYL', 'PH08GYL', 'H08GYL', 'PH08BYL', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'G06XRA', 'B06XRA', 'B06XRA', 'D06XRA', 'B06XRA', 'B06XRA', 'B06XRA', 'G06XRA', 'B05XRA', 'B08GHQ', 'B08GHO', 'B08GHQ', 'B08GHO', 'B08GHD', 'B08GHG', 'B08GHO', 'B08GHQ', 'B08GHO', 'B08GHG', 'B08GHQ', 'B08GHO', 'B08GHD', 'B08GHG', 'F09NEN', 'IF09NEN', 'LF09NEN', 'Q09NEN', 'IF09NEN', 'IF09NEM', 'IF09MEN', 'IF09NEN', 'F09NEN', 'IF09MEN', 'IF09NEN', 'F09NEN', 'IF09NEM', 'IF09MEN', 'IF09NEN', 'F09NEN', 'DB10MNH', 'D10MNH', 'QB10MNH', 'D810MNH', 'DG10MNH', 'D610MNH', 'B08XTZ', 'B08XTZ', 'G08XTZ', 'B14UNT', 'B14UMT', 'U14UNT', 'VN05UPB', 'WN05UPB', 'N05UPB', 'VN05UPB', 'VN05UFB', 'VN05UPG', 'WN05UPB', 'VN05UPB', 'VN05UFB', 'VN05UPG', 'VN05OPB', 'VM05UPB', 'VN05UPB', 'VN05UPG', 'VN05UPB', 'VN05UPD', 'VN05UPO', 'VN05DPB', 'VN05OPB', 'VN05UPB', 'VN05UFB', 'VN05UPE', 'VN05UBE', 'J22DGA', 'J22OGA', 'J22QGA', 'J22BGA', 'GR22DGA', 'GR22OGA', 'SR22DGA', 'R22DGA', 'GR22QGA', 'GR22DBA', 'GR22BGA', 'GR22DGA', 'GR22OGA', 'GR22QGA', 'BR22DGA', 'R22DGA', 'GR22BGA', 'GR22DGA', 'GR22QGA', 'GR22OGA', 'R22DGA', 'BR22DGA', 'GR22BGA', 'GR22DGA', 'R22DGA', 'BR22DGA', 'GR22OGA', 'GR22BGA', 'GR22QGA', 'GR22DGA', 'GR220GA', 'GR22OGA', 'GR22QGA', 'GR22GAI', 'GR22BGA', 'GR22DGA', 'R22DGA', 'GR22QGA', 'GR22OGA', 'GR22BGA', 'GR22DGA', 'GR22OGA', 'GR22BGA', 'GR22QGA', 'R22DGA', 'GR22GGA', 'GR22DGA', 'GR22OGA', 'SR22DGA', 'R22DGA', 'GR22QGA', 'GR22BGA', 'GR22DGA', 'SR22DGA', 'R22DGA', 'GR22BGA', 'GR22OGA', 'GR22QGA', 'GR22DGA', 'GR22OGA', 'GR22QGA', 'GR22BGA', 'R22DGA', 'GR22GGA', 'GR22DGA', 'R22DGA', 'SR22DGA', 'GR22BGA', 'GR22OGA', 'GR22QGA', );

$arrArea = array( "AB", "AR", "AG", "B", "BC", "BH", "BN", "BT", "BV", "BR", "BZ", "CS", "CL", "CJ", "CT", "CV", "DB", "DJ", "GL", "GR", "GJ", "HR", "HD", "IL", "IS", "IF", "MM", "MH", "MS",
"NT", "OT", "PH", "SM", "SJ", "SB", "SV", "TR", "TM", "TL", "VS", "VL", "VN");

$arrTopFound = array_count_values($arr);
arsort($arrTopFound);

#print "<pre>";
#print_r($arrTopFound);

foreach($arrTopFound as $key => $value){
    // cut string to max 2 +  remove digits (0-9) + compare with found data
    if ( in_array(   preg_replace("/[^a-zA-Z-]/", "",    substr($key,0,2)),     $arrArea    )){

        if(preg_match('/[A-Z]{1,2}[0-9]{2,3}[A-Z]{3}/',$key)){
            printf ("%10s  " ,  $key );
            print  "   , score   " .$value. " <br>";
        }
    }
}

/*
http://www.numereauto.com/VN05UPB
http://www.numereauto.com/VN05UFB
https://numarauto.com/GR22DGA
*/

// greyscale images
$arrGrey = array(
	"B06XRA" , "VN05UPB" , "GR22QGA" , "GR22OGA" , "GR22DGA" , "VN05UPG" ,	"GR16EDU" , "GR22BGA" , "GR16EOU" , "GR16EQU" , "IF09NEN" , "B08GHO" ,
	"B08GHQ" , "GR16EDO" , "GR16EBU" , "PH08GYL" , "B08GHD" , "VN05UFB" ,	"B110WWS" , "GR16EDD" , "GR22DSA" , "B48VIC" , "B148VIG" , "BT48VIC" ,
	"B148VIC" , "IF09NEM" , "B08XTZ" , "DB10MNH" , "DB10MMH" , "B10MNH" ,	"B11QWS" , "VN05DPB" , "VN05OPB" , "VN05WPB" , "VN05QPB" , "VN05UPD" ,
	"BR22DGA" , "GR22GGA" , "B11OWS" , "B11DWS" , "CT08ERM" , "GR16EGU" ,	"PH08BYL" , "PH08SYL" , "PH09GYL" , "B00XRA", "B05XRA" , "B08GHG" );

// color images
$arrColor = array(
	"B06XRA" , "GR22DGA" , "GR22BGA" , "GR22QGA" , "GR22OGA" ,	"VN05UPB" , "B08GHO" , "IF09NEN" , "B08GHQ" , "IF09MEN" ,
	"B08GHG" , "BR22DGA" , "VN05UPG" , "VN05UFB" , "PH08GYL" ,	"VN05OPB" , "B08XTZ" , "GR22GGA" , "IF09NEM" , "B08GHD" ,
	"PH08BYL" , "B05XRA" , "VN05UBE" , "GR22DBA" , "PH08GVL" ,	"GR22GAI" , "VN05UPE" , "VN05DPB" , "VN05UPO" , "VN05UPD" ,
	"DB10MNH" , "B14UNT" , "B14UMT" );

// real list of plates
$arrRealPlates = array(
	"B99CMM", "B92GEF", "B28AZS", "CL83ENE", "B149MAC", "B76SNJ",	"B26WUW", "B23MSK", "GR16EDU", "PH08GYL", "B06XRA", "B117VKY",
	"B03NXK" , "IL10KTO", "B177NLM", "B08GHO", "IF12BMI", "B141BDR", "B08UNA",	"IF09NEN", "B148VIC", "DB10MNH", "B08XTZ", "B14UNT", "B850DRG", "VN05UPB",
	"B202WML", "TL16XYZ", "GR22DGA", "B110WWS", "B37DAK", "B09MXE" );

print "<pre>";
print_r(count(array_intersect($arrGrey,$arrRealPlates)));
print "<br>";
print_r(count(array_intersect($arrColor,$arrRealPlates)));
print "<br>";
print_r(count($arrRealPlates));

// 11 matches
// 9 matches
// 32 total





























