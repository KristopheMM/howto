
##################################################################
#
#   Introduction to Data Analtics with Pandas [PyCon Cz]
#   https://speakerdeck.com/hendorf/introduction-to-data-analtics-with-pandas-pycon-cz?slide=16
#
##################################################################

df.head(5)
df[:100].plot(kind='bar')
ax = df[:100].plot()
ax.axhline(16,color='r',linestyle='-')

pd.Dataframe()
series = pd.Series(np.random.rand(n)) # float64
series = pd.Series(np.random.randint(1,5,n)) # int64
series = pd.Series(np.random.randint(1,5,n), dtype=np.float64) # float64
series = pd.Series(np.random.randint(1,5,n), dtype=np.float64, index=[n*x for x in range(n)])
series = pd.Series(np.random.randint(1,5,n), dtype=np.float64, index=list('ABCDEFG')[:n])

# access
series['A'] or series[0]
series[['A','D']] or series[1:3]
series[[1,3]]
series[lambda x: x%2 == 0 ]

ax = series.loc[['A','B']].plot()
ax = series.ix[['A','B']].plot()
ax = series.ix[[2,3]].plot()

series.sample(2)
series.name = "some name"

df.columns = ['timestamp','temperature']
df.head(3)
df[:100].plot()

def tofahrenheit(celsius):
	return (celsius * 9./5.) + 32.
df['temperature'].map(tofahrenheit)[:5]
df['temperature F'] = df['temperature'].map(tofahrenheit)
df.head(5)
df['temperature F'] = df['temperature'].apply(lambda x: x * 9./5.) + 32.)
df.head(5)
df['temperature F'].describe()

df.rename(columns={'someoldname','newname'},inplace=True)
df.head(5)

df.drop('somecolumn', axis=1, inplace=True)
df.head()
df.groupby('temperature').count()

df['col2'] =  df['col3'] - df['col3'].mean()
df['col2'].plot()
df['col2'].describe()
df.describe(percentiles=[.1, .5., .7])
df.describe(percentiles=[.1, .5., .7], include=[np.float64])

df[df['col2'].isnull()]
df['col3'].isnull()[2345:3333]]
df['col2'].isnull().any()
df.dropna()
df.dropna(inplace=True)

df.index = pd.to_datetime(df['timestamp'])
ax = df[:100].plot()
ax.axhline(df[:100['temperature'].median(), color='r',linestyle='-'])
df.head()
df.index.view
df.groupby(df.index.date).count()
df.groupby(df.index.week).mean().plot()
df[df.index.weekday == True]['temperature'].plot()

df['weekday'] = df.index.weekday
df['weekday'] = df['weekday'].isin({5,6})
df.groupby(['weekend', df.index.hour])['temperature'].mean().unstack(level=0).plot()
df['2014-09']['temperature'].plot()
df['2014-09-22':'2014-09-23']['temperature'].plot()
df[(df.index.hour > 12 ) & (df.index.hour <=16 ) ]['temperature'].plot()