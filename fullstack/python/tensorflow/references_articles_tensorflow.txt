

--------------------------------------------------------------------------------------------
sudo apt-get install imagemagick


--------------------------------------------------------------------------------------------
https://pillow.readthedocs.io/en/stable/reference/Image.html
https://pillow.readthedocs.io/en/3.1.x/reference/Image.html

https://www.datacamp.com/community/tutorials/tensorflow-tutorial
https://gist.github.com/abrahamrhoffman/a121d74a20450321f6fb85d5de08214a
https://www.oreilly.com/learning/not-another-mnist-tutorial-with-tensorflow
https://adammonsen.com/post/1519/


https://github.com/tensorflow/models/blob/master/tutorials/image/imagenet/classify_image.py
https://gist.github.com/kwotsin/292eb12600be02b75bf69ff8010d07ce
https://github.com/MicrocontrollersAndMore/TensorFlow_Tut_2_Classification_Walk-through/blob/master/test.py
https://github.com/ziwon/learning-tensorflow/blob/master/07-App%26Tips/02-mnist-show.py
https://www.tensorflow.org/tutorials/images/hub_with_keras
https://www.tensorflow.org/api_docs/python/tf/Session
--------------------------------------------------------------------------------------------
# show predictons

import matplotlib.pyplot as plt
sudo apt-get install python-tk
sudo apt-get install python3-tk


predictions = sess.run(y, {feed_dict={x: test_images32}})
for i, image in enumerate(test_images32):
     plt.imshow(image) # depending on being RGB or gray this might need to be reshaped
     print(np.argmax(predictions[i]))


predicted = sess.run([correct_pred], feed_dict={x: sample_images})[0]
# Print the real and predicted labels
print(sample_labels)
print(predicted)
# Display the predictions and the ground truth visually.
fig = plt.figure(figsize=(10, 10))
for i in range(len(sample_images)):
    truth = sample_labels[i]
    prediction = predicted[i]
    plt.subplot(5, 2,1+i)
    plt.axis('off')
    color='green' if truth == prediction else 'red'
    plt.text(40, 10, "Truth:        {0}\nPrediction: {1}".format(truth, prediction),
             fontsize=12, color=color)
    plt.imshow(sample_images[i],  cmap="gray")


--------------------------------------------------------------------------------------------

import tensorflow as tf
import numpy as np
import cv2

labels = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

# Load graph and parameters, etc.
sess=tf.Session()
saver = tf.train.import_meta_graph('./model/Inception_resnet_v2.ckpt.meta')
saver.restore(sess, tf.train.latest_checkpoint("./model/"))
graph = tf.get_default_graph()

# Get tensor names
x = graph.get_tensor_by_name("Placeholder:0")
training_flag = graph.get_tensor_by_name("Placeholder_2:0")
op_to_restore = graph.get_tensor_by_name("final_fully_connected/dense/BiasAdd:0")

# Preprocess imgae imput
src = cv2.imread("./input/car3.jpg")
dst = cv2.resize(src, (32, 32), interpolation=cv2.INTER_CUBIC)
b,g,r = cv2.split(dst)
b = (b - np.mean(b)) / np.std(b) * .1
g = (g - np.mean(g)) / np.std(g) * .1
r = (r - np.mean(r)) / np.std(r) * .1
src = cv2.merge((b,g,r))

picture = dst.reshape(1, 32, 32, 3)
feed_dict ={x: picture, training_flag:False}

result_index = sess.run(op_to_restore,feed_dict)
print(result_index)
print (labels[np.argmax(result_index)])

--------------------------------------------------------------------------------------------

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf
import numpy as np
import PIL.Image as pimg

if __name__ == '__main__':
    image = tf.convert_to_tensor(np.array(pimg.open('image.png'), np.float), tf.float32)
    bbox = tf.convert_to_tensor([[0.1, 0.1, 0.4, 0.4], [0.5, 0.5, 0.6, 0.7]])
    with tf.Session() as s:
        s.run(tf.global_variables_initializer())
        output = s.run(tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), tf.expand_dims(bbox, 0)))
        pimg.fromarray(np.uint8(output[0])).save('output.png')

--------------------------------------------------------------------------------------------

94.7% of accuracy.
image_data = tf.gfile.FastGFile(image_path, 'rb').read()
predictions = sess.run(softmax_tensor, {'DecodeJpeg/contents:0': image_data})

77% of accuracy.
image = cv2.imread(image_path)
image_array = np.asarray(image)
predictions = sess.run(softmax_tensor, {'DecodeJpeg:0': image_array})

--------------------------------------------------------------------------------------------


https://www.tensorflow.org/guide/datasets
https://www.tensorflow.org/guide
https://github.com/unography/Tensorflow-Examples/blob/master/retraining-example.py



##########################################################
#
# 25 sec per 500 images on GPU
#
##########################################################

import numpy as np
import tensorflow as tf
import glob
import os
modelFullPath = 'output_graph.pb'


def create_graph():
    """Creates a graph from saved GraphDef file and returns a saver."""
    # Creates graph from saved graph_def.pb.
    with tf.gfile.FastGFile(modelFullPath, 'rb') as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
        _ = tf.import_graph_def(graph_def, name='')

if __name__ == '__main__':

    imagePath = 'MYFOLDERWITHIMAGES/*.jpg'
    testimages=glob.glob(imagePath)

    ## init numpy array to hold all predictions
    all_predictions = np.zeros(shape=(len(testimages),121)) ## 121 categories


    # Creates graph from saved GraphDef.
    create_graph()

    with tf.Session() as sess:
        softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')
        for i in range(len(testimages)):
            image_data1 = tf.gfile.FastGFile(testimages[i], 'rb').read()
            predictions = sess.run(softmax_tensor,
                                   {'DecodeJpeg/contents:0': image_data1})
            all_predictions[i,:] = np.squeeze(predictions)
            if i % 100 == 0:
              print(str(i) +' of a total of '+ str(len(testimages)))


--------------------------------------------------------------------------------------------

https://serverless.com/blog/using-tensorflow-serverless-framework-deep-learning-image-recognition/
https://thehive.ai/engineering/simple-ml-serving
https://heartbeat.fritz.ai/introduction-to-machine-learning-on-android-part-2-building-an-app-to-recognize-handwritten-d58ebc01950
https://opensource.com/article/17/12/tensorflow-image-classification-part-1
https://medium.com/@linjunghsuan/create-a-simple-image-classifier-using-tensorflow-a7061635984a
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-tensorflow-on-ubuntu-16-04
https://douglasduhaime.com/posts/identifying-similar-images-with-tensorflow.html
https://www.youtube.com/watch?v=zNTQXqmwm5Q
https://medium.com/@WuStangDan/step-by-step-tensorflow-object-detection-api-tutorial-part-5-saving-and-deploying-a-model-8d51f56dbcf1
https://medium.com/coinmonks/part-3-of-3-model-usage-transfer-learning-using-tensorflows-object-detection-model-on-mac-c7a77aa5e0b2
https://medium.com/coinmonks/part-1-2-step-by-step-guide-to-data-preparation-for-transfer-learning-using-tensorflows-object-ac45a6035b7a
https://towardsdatascience.com/how-to-train-a-tensorflow-face-object-detection-model-3599dcd0c26f
https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html
https://github.com/qdraw/tensorflow-object-detection-tutorial
https://github.com/OlafenwaMoses/ImageAI/blob/master/examples/image_object_detection.py
https://github.com/Sid2697/Object-Detection-MobileNet/blob/master/image_object_detection.py
https://github.com/qdraw/tensorflow-object-detection-tutorial/blob/master/image_object_detection.py
https://github.com/Sid2697/Object-Detection-MobileNet
https://blog.goodaudience.com/food-detection-app-using-tensorflow-object-detection-apis-1b9302a9aad2
https://github.com/kumarkan/Food_Detection/blob/master/README.md
https://becominghuman.ai/transfer-learning-retraining-inception-v3-for-custom-image-classification-2820f653c557




https://www.tensorflow.org/tutorials/estimators/cnn
https://jhui.github.io/2017/03/14/TensorFlow-Estimator/
https://datascience.stackexchange.com/questions/31167/how-to-predict-an-image-using-saved-model
https://www.tensorflow.org/api_docs/python/tf/saved_model
https://docs.databricks.com/_static/notebooks/deep-learning/tensorflow-tfrecord.html
https://github.com/cjimti/aipnd-project/blob/master/predict.py
https://git.mif.vu.lt/TankBusterPBL/TankBuster/blob/815f5cbe79fb09b06f8b15785231fe871396216c/bin/Tensorflow/Tensorflow/tutorials/image/imagenet/classify_image.py
https://gitbay.hockeymikey.com/hockeymikey/BNN/blob/master/tflow-testing/imagenet/classify_image.py
https://gitlab.fit.cvut.cz/sedlam34/mvi-sp/blob/master/classify_image.py
https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/exporting_models.md
http://lamastex.org/courses/ScalableDataScience/2016/S1/week9/18_sparklingTensorFlow/034_SampleML_SparkTensorFlow.html
https://github.com/tensorflow/models/issues/2076
https://www.oreilly.com/ideas/object-detection-with-tensorflow
https://github.com/tensorflow/models/blob/master/research/object_detection/utils/visualization_utils_test.py
https://dedi.live/git/tommasaso/GroupProject/src/d0af00befbe2089cab00bd3a7d984e2d81292e0b/utils/visualization_utils_test.py
https://cloud.google.com/blog/products/gcp/performing-prediction-with-tensorflow-object-detection-models-on-google-cloud-machine-learning-engine
https://www.tensorflow.org/tensorboard/r2/image_summaries
https://jhui.github.io/2017/03/12/TensorBoard-visualize-your-learning/
https://github.com/tensorflow/models/blob/master/research/object_detection/utils/visualization_utils.py#L323
https://github.com/tensorflow/models/tree/master/research/object_detection
https://scm.agreeyamobility.net:8443/shriyash.ingale/YAD2K/blob/master/retrain_yolo.py
https://towardsdatascience.com/understanding-fundamentals-of-tensorflow-program-and-why-it-is-necessary-94cf5b60e255
https://www.easy-tensorflow.com/tf-tutorials/tensorboard/tb-visualize-graph
https://pythonprogramming.net/tensorflow-neural-network-session-machine-learning-tutorial/
https://github.com/Dataweekends/inception-retrain/blob/master/label_image.py
https://github.com/tensorflow/tensorflow/issues/16194
https://github.com/sankit1/cv-tricks.com/blob/master/Tensorflow-tutorials/Adversarial_examples/classify_image.py
https://github.com/ageitgey/face_recognition/blob/master/examples/identify_and_draw_boxes_on_faces.py




tf.image.draw_bounding_boxes(
    images,
    boxes,
    name=None
)



https://towardsdatascience.com/how-to-deploy-machine-learning-models-with-tensorflow-part-1-make-your-model-ready-for-serving-776a14ec3198
https://github.com/tensorflow/models/tree/master/research/object_detection
https://medium.freecodecamp.org/how-to-deploy-an-object-detection-model-with-tensorflow-serving-d6436e65d1d9
https://pjreddie.com/darknet/yolo/
https://github.com/pjreddie/darknet/wiki/YOLO:-Real-Time-Object-Detection
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/how_tos/reading_data
https://github.com/AshutoshDongare/Tensorflow-Wide-Deep-Local-Prediction
https://stackoverflow.com/questions/33759623/tensorflow-how-to-save-restore-a-model
https://stackoverflow.com/questions/49242744/how-to-load-unload-a-graph-from-a-session-in-tensorflow
https://github.com/tensorflow/models/blob/master/research/object_detection/dataset_tools/create_oid_tf_record.py
https://blog.algorithmia.com/deep-dive-into-object-detection-with-open-images-using-tensorflow/
http://yeephycho.github.io/2016/08/15/image-data-in-tensorflow/
https://www.dlology.com/blog/how-to-leverage-tensorflows-tfrecord-to-train-keras-model/
https://www.tensorflow.org/tutorials/load_data/images
https://medium.freecodecamp.org/how-to-deploy-an-object-detection-model-with-tensorflow-serving-d6436e65d1d9
https://github.com/ayu34/Object-Detection-with-YOLO-using-Tensorflow-and-Keras
https://medium.com/@thakur.ayu.7/object-detection-using-yolov2-with-tensorflow-implementation-e83cc062bd63
https://github.com/lambdal/lambda-deep-learning-demo
https://lambdalabs.com/blog/how-to-implement-ssd-object-detection-in-tensorflow/
https://www.tensorflow.org/api_docs/python/tf/image/draw_bounding_boxes
https://github.com/tensorflow/models/blob/master/research/object_detection/core/box_predictor.py
https://github.com/tensorflow/models/tree/master/research/object_detection
https://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html
https://pytorch.org/tutorials/beginner/fgsm_tutorial.html
https://pytorch.org/tutorials/advanced/neural_style_tutorial.html
https://pytorch.org/tutorials/intermediate/spatial_transformer_tutorial.html
https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html
https://www.tensorflow.org/tutorials/images/deep_cnn
https://github.com/tensorflow/models/blob/master/samples/outreach/blogs/segmentation_blogpost/image_segmentation.ipynb
https://github.com/tensorflow/models/blob/master/research/nst_blogpost/4_Neural_Style_Transfer_with_Eager_Execution.ipynb
https://www.tensorflow.org/tutorials/keras/basic_classification
https://www.tensorflow.org/tutorials/images/hub_with_keras
https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/pix2pix/pix2pix_eager.ipynb

https://www.floydhub.com/whatrocks/datasets/cozmo-imagenet/1/imagenet
https://stackoverflow.com/questions/35635131/unable-to-visualize-inception-v3-model-in-tensorboard-with-tensorflow-0-7-1

tensorboard --logdir /tmp/inception_v3_log



https://github.com/taey16/tf
https://raw.githubusercontent.com/ryfeus/lambda-packs/master/Tensorflow/index.py
https://www.programcreek.com/python/example/90574/tensorflow.write_file
https://www.tensorflow.org/guide/graphs
https://github.com/tensorflow/models/issues/1286
https://github.com/tensorflow/tensorflow/issues/616

https://towardsdatascience.com/multi-label-image-classification-with-inception-net-cbb2ee538e30
https://cv-tricks.com/tensorflow-tutorial/training-convolutional-neural-network-for-image-classification/
https://www.skcript.com/svr/why-every-tensorflow-developer-should-know-about-tfrecord/
https://www.w3cschool.cn/tensorflow_python/tensorflow_python-49hr2d2y.html
https://github.com/tensorflow/models/issues/4864
https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md
https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb
https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/4_Utils/save_restore_model.py
https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/5_DataManagement/build_an_image_dataset.py





sudo apt-get install protobuf-compiler python-pil python-lxml python-tk

pip3 install --user Cython
pip3 install --user contextlib2
pip3 install --user jupyter
pip3 install --user matplotlib

pip3 install --user Cython
pip3 install --user contextlib2
pip3 install --user pillow
pip3 install --user lxml
pip3 install --user jupyter
pip3 install --user matplotlib



   #create the second graph
    g = tf.Graph()
    with g.as_default():
      inp = tf.Variable(preds)
      reshape1 = tf.reshape(printnode, [IM_WIDTH, IM_HEIGHT, -1])
      sliced = tf.slice(reshape1, [0,0,0], [ IM_WIDTH, IM_HEIGHT,1])
      reshaped = tf.reshape(sliced, [IM_HEIGHT, IM_WIDTH, 1])
      encoded = tf.image.encode_png(tf.image.convert_image_dtype(reshaped,tf.uint16))
      outputfile = tf.write_file("prediction_img.png", encoded)
      with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        sess.run(outputfile)
    """



np.savetxt("prediction.csv", predictions, delimiter=",")

  """
  # Actual detection.
    #output_dict = run_inference_for_single_image(image_data)
  # Visualization of the results of a detection.
  vis_util.visualize_boxes_and_labels_on_image_array(
      image_data,
      output_dict['detection_boxes'],
      output_dict['detection_classes'],
      output_dict['detection_scores'],
      category_index,
      instance_masks=output_dict.get('detection_masks'),
      use_normalized_coordinates=True,
      line_thickness=8)
  plt.figure(figsize=IMAGE_SIZE)
  plt.imshow(image_data)
  """



def run_inference_for_single_image(image, graph):
  with graph.as_default():
    with tf.Session() as sess:
      # Get handles to input and output tensors
      ops = tf.get_default_graph().get_operations()
      all_tensor_names = {output.name for op in ops for output in op.outputs}
      tensor_dict = {}
      for key in [
          'num_detections', 'detection_boxes', 'detection_scores',
          'detection_classes', 'detection_masks'
      ]:
        tensor_name = key + ':0'
        if tensor_name in all_tensor_names:
          tensor_dict[key] = tf.get_default_graph().get_tensor_by_name(
              tensor_name)
      if 'detection_masks' in tensor_dict:
        # The following processing is only for single image
        detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
        detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])
        # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.
        real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
        detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
        detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
        detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
            detection_masks, detection_boxes, image.shape[1], image.shape[2])
        detection_masks_reframed = tf.cast(
            tf.greater(detection_masks_reframed, 0.5), tf.uint8)
        # Follow the convention by adding back the batch dimension
        tensor_dict['detection_masks'] = tf.expand_dims(
            detection_masks_reframed, 0)
      image_tensor = tf.get_default_graph().get_tensor_by_name('image_tensor:0')

      # Run inference
      output_dict = sess.run(tensor_dict,
                             feed_dict={image_tensor: image})

      # all outputs are float32 numpy arrays, so convert types as appropriate
      output_dict['num_detections'] = int(output_dict['num_detections'][0])
      output_dict['detection_classes'] = output_dict[
          'detection_classes'][0].astype(np.uint8)
      output_dict['detection_boxes'] = output_dict['detection_boxes'][0]
      output_dict['detection_scores'] = output_dict['detection_scores'][0]
      if 'detection_masks' in output_dict:
        output_dict['detection_masks'] = output_dict['detection_masks'][0]
  return output_dict




