#######################################################
#
#   FIX Warnings
#
#######################################################

//  replace FastGFile with GFile

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
0 = all messages are logged (default behavior)
1 = INFO messages are not printed
2 = INFO and WARNING messages are not printed
3 = INFO, WARNING, and ERROR messages are not printed
// set Debug Level to 3

import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='3'
#os.environ['TF_CPP_MIN_VLOG_LEVEL']='3'
import tensorflow as tf

----------------------------------------------
// resize img ...
// models/tutorials/image/imagenet/classify_image.py

"""
# pip3 install scikit-image
# sudo pip3 install opencv-contrib-python
# pip3 install Pillow

# sudo apt-get install python-matplotlib python-numpy python-pil python-scipy
# sudo apt-get install build-essential cython
# sudo apt install python-skimage
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import os.path
import re
import sys
import tarfile
import cv2

os.environ['TF_CPP_MIN_LOG_LEVEL']='3'

import PIL
from PIL import Image, ImageOps

from skimage import io
from skimage.transform import resize
from skimage import data, color
from skimage.transform import rescale, resize, downscale_local_mean

import numpy as np
from six.moves import urllib
import tensorflow as tf






def run_inference_on_image(image):
  ...


# pip3 install tensorflow
image_data = tf.gfile.GFile(image, 'rb').read()
predictions = sess.run(softmax_tensor,{'DecodeJpeg/contents:0': image_data})


# pip3 install Pillow
from PIL import Image
imager = Image.open(image)
size = 156, 156
imager.thumbnail(size)
image_data = np.array(imager)[:, :, 0:3]  # Select RGB channels only.
predictions = sess.run(softmax_tensor, {'DecodeJpeg:0': image_data})


# pip install opencv-python
import cv2
imager = cv2.imread(image)
height, width = imager.shape[:2]
newimg = cv2.resize(imager,  None, fx = 0.2, fy = 0.2)
image_data = np.array(newimg)[:, :, 0:3]
#cv2.imshow("Shrinked image", image_data)
#cv2.waitKey(0)
#cv2.destroyAllWindows()
predictions = sess.run(softmax_tensor, {'DecodeJpeg:0': image_data})


############################################################
#
#   Bilderkennung mit Tensorflow in Ubuntu 17.04/18.04/19.04
#
############################################################
// Usage with Python API Tensorflow


Step1 . Install Dependency Packages

sudo apt install python3-pip -y
pip3 install tensorflow
pip3 install numpy
pip3 install pandas


Step2. Install Models f√ºr Tensorflow
git clone https://github.com/tensorflow/models
cd models/tutorials/image/imagenet

Step3. Run Python Script
python3 classify_image.py --image_file ~/Downloads/palm_baby/baby2.jpg

Output:
toilet tissue, toilet paper, bathroom tissue (score = 0.14066)
paper towel (score = 0.05858)
handkerchief, hankie, hanky, hankey (score = 0.04211)
groom, bridegroom (score = 0.04065)
pajama, pyjama, pj's, jammies (score = 0.03977)


FIX Allocation of 9782001216 exceeds 10% of system memory
pip install h5py==2.8.0rc1
go to model/research/slim and run the following: `pip install -e .`

############################################################
#
#   Bilderkennung mit Yolo in Ubuntu 17.04/18.04/19.04
#
############################################################

Step1. Yolo Installation
git clone https://github.com/pjreddie/darknet.git
cd darknet
make


Step2. Get Yolo Training Models
wget https://pjreddie.com/media/files/yolov3.weights
wget https://pjreddie.com/media/files/yolo.weights
wget https://pjreddie.com/media/files/yolov2.weights
wget https://pjreddie.com/media/files/yolo-tiny.weights

Step3. Detection Using A Pre-Trained Model
./darknet detect cfg/yolov3.cfg yolov3.weights  ~/Downloads/palm_baby/baby1.jpg -out baby1_prediction.jpg

output
baby1.jpg: Predicted in 8.617667 seconds.

person: 82%
person: 64%
person: 55%




