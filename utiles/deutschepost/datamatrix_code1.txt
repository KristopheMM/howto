
##########################################
#
#	DATAMATRIX (ISO/IEC 16022:2006)
#
###########################################

FNC1 which must be encoded in the symbol, when used as a start or separator character, but never appears in the Human Readable Interpretation.
Ex: Encoded String: FNC101095011010209171719050810ABCD1234 FNC12110

LSB = Least significant bit
MSB = Most significant bit

GS1 DataMatrix (Data Matrix ECC 200)
TCPDF DATAMATRIX (ISO/IEC 16022:2006)

References:
https://www.gs1.org/docs/barcodes/GS1_DataMatrix_Guideline.pdf

https://stackoverflow.com/questions/33093751/add-a-fnc1-character-to-code-created-with-tcpdf-datamatrix
https://github.com/stephen-hill/base58php/blob/master/src/GMPService.php


// * Decode base58 into a PHP string.

 	$indexes = array_flip(str_split($this->alphabet));
        $chars = str_split($base58);
        // Check for invalid characters in the supplied base58 string
        foreach ($chars as $char) {
            if (isset($indexes[$char]) === false) {
                throw new InvalidArgumentException('Argument $base58 contains invalid characters.');
            }
        }
        // Convert from base58 to base10
        $decimal = gmp_init($indexes[$chars[0]], 10);
        for ($i = 1, $l = count($chars); $i < $l; $i++) {
            $decimal = gmp_mul($decimal, $this->base);
            $decimal = gmp_add($decimal, $indexes[$chars[$i]]);
        }
        // Convert from base10 to base256 (8-bit byte array)
        $output = '';
        while (gmp_cmp($decimal, 0) > 0) {
            list($decimal, $byte) = gmp_div_qr($decimal, 256);
            $output = pack('C', gmp_intval($byte)) . $output;
        }
        // Now we need to add leading zeros
        foreach ($chars as $char) {
            if ($indexes[$char] === 0) {
                $output = "\x00" . $output;
                continue;
            }
            break;
        }


//  * Encode a string into base58.

 	// Now we need to convert the byte array into an arbitrary-precision decimal
        // We basically do this by performing a base256 to base10 conversion
        $hex = unpack('H*', $string);
        $hex = reset($hex);
        $decimal = gmp_init($hex, 16);
        // This loop now performs base 10 to base 58 conversion
        // The remainder or modulo on each loop becomes a base 58 character
        $output = '';
        while (gmp_cmp($decimal, $this->base) >= 0) {
            list($decimal, $mod) = gmp_div_qr($decimal, $this->base);
            $output .= $this->alphabet[gmp_intval($mod)];
        }
        // If there's still a remainder, append it
        if (gmp_cmp($decimal, 0) > 0) {
            $output .= $this->alphabet[gmp_intval($decimal)];
        }
        // Now we need to reverse the encoded data
        $output = strrev($output);
        // Now we need to add leading zeros
        $bytes = str_split($string);
        foreach ($bytes as $byte) {
            if ($byte === "\x00") {
                $output = $this->alphabet[0] . $output;
                continue;
            }
            break;
        }


---------------

You have to use \x0000 and select "Decode Null" at the Barcode-Parameters.
This generates zero bytes (00) in the datamatrix.
http://streamshare.streamserve.com/Forum/Topic/?topicID=5350

// https://rosettacode.org/wiki/Non-decimal_radices/Output#PHP
<?php
foreach (range(0, 33) as $n) {
  echo decbin($n), "\t", decoct($n), "\t", $n, "\t", dechex($n), "\n";
}
?>

<?php
foreach (range(0, 33) as $n) {
  printf(" %6b %3o %2d %2X\n", $n, $n, $n, $n);
}
?>

------

<?php
function to_base256($number, $from_base = 10) {
    $binary_number = base_convert($number, $from_base, 2);
    $final_string = "";
    $new_length = (ceil(strlen($binary_number)/8)*8);
    $binary_number = str_pad($binary_number, $new_length, "0", STR_PAD_LEFT);
    for($i=($new_length-8); $i>=0; $i-=8) {
        $final_string = chr(base_convert(substr($binary_number, $i, 8), 2, 10)).$final_string;
    }
    return $final_string;
}

function from_base256($string, $to_base = 10) {
    $number = "";
    for($i=0; $i<strlen($string); $i++) {
        $number .= str_pad(base_convert(ord($string{$i}), 10, 2), 8, "0", STR_PAD_LEFT);
    }
    return base_convert($number, 2, $to_base);
}
?>

http://php.net/manual/de/function.base-convert.php
https://etherhack.co.uk/ascii/baseconvert/baseconvert.html

---

Python HEX Reader

https://gist.github.com/5263/1208694


frankierart={
	0x01:'Stampit 2003',
	0x02:'0x02???',
	0x03:'Frankit',
	0x05:'Filiale',
	0x07:'Frankierservice Infopost/Infobrief',
	0x08:'Premiumadress',
	0x09:'Pressepost Randbeschriftung 52x52 Module, Version 1',
	0x0c:'Frankit PremA???',
	0x12:'DV-Freimachung',
	0x18:'Elektroreturn',
	0x19:'Pressepost Etikett, Version1',
	0x1a:'Pressepost Randbeschriftung 16x28 Module, Version 1',
	0x1c:'Premiumadress Label',
	0x30:'Plusbrief',
	0x33:'Stampit',
	0x30:'Plusbrief individuell',
	0x42:'Plusbrief/Marke individuell',
	0x4d:'Handyporto?',
	0x52:'Elektroreturn',
	0x66:'Handyporto?',
	#0x33:'Marke individuell',
	0x85:'Internetmarke'

}
productid={
	1:'Standardbrief',
	2:'Standardbrief Einschreiben Einwurf',
	7:'Standardbrief Einschreiben',
	8:u'Standardbrief Einschreiben + R\xfcckschein',
	9:u'Standardbrief Einschreiben + Eigenh\xe4ndig',
	10:u'Standardbrief Einschreiben + Eigenh\xe4ndig + R\xfcckschein',
	11:'Kompaktbrief',
	21:u'Gro\xdfbrief',
	32:'Maxibrief',
	51:'Postkarte',
	76:u'B\xfcchersendung Standard',
	77:u'B\xfcchersendung Kompakt',
	78:u'B\xfcchersendung Gro\xdf',
	79:u'B\xfcchersendung Maxi',
	80:u'Warensendung Standard',
	81:u'Warensendung Kompatk',
	82:u'Warensendung Maxi',
	83:u'Warensendung Standard',
	80:u'Warensendung Standard',

	86:'Infobrief/Katalog Standard',
	87:'Infobrief/Katalog Kompakt',
	88:u'Infobrief/Katalog Gro\xdf',
	89:'Infobrief/Katalog Maxi',
	90:'Infopost/Katalog',
	450:'Pressesendung E+0',
	451:'Pressesendung E+1',
	452:'Pressesendung E+2',
	453:'Postvertriebsstk. E+0',
	454:'Postvertriebsstk. E+1',
	455:'Postvertriebsstk. E+2',
	3106:'Infopost/Katalog Kompakt',
	3101:'Infopost/Katalog Kompakt >20g',
	3107:u'Infopost/Katalog Gro\xdf',
	3108:u'Infopost/Katalog Maxi',
	3104:u'Infopost/Katalog Maxi >20g',
	3105:u'Infopost/Katalog Maxi >100g',
	9001:'Standardbrief PremA',
	9279:'Pressesendung E+0 PremA',
	9280:'Pressesendung E+1 PremA',
	9287:'Pressesendung E+2 PremA'
}
frankmaschmanuf={
	0x1d:'Neopost',
	0x2d:'Frama',
	0x3d:'Francotyp-Postalia',
	0x4d:'Pitney Bowes',
	0x6d:'Telefrank'}
# Write a Data Matrix barcode
#dm_write = DataMatrix()
#dm_write.encode("Hello, world!")
#dm_write.save("hello.png", "png")

------------------------------------------------------------

Encoding mode	DataMatrix type
0		Auto Square
1		Auto Rectangular
2		ASCII Square
3		ASCII Rectangular
4		C40 Square
5		C40 Rectangular
6		Text Square
7		Text Rectangular
8		X12 Square
9		X12 Rectangular
10		EDIFACT Square
11		EDIFACT Rectangular
12		Base 256 Square
13		Base 256 Rectangular